// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// AudioOutputFormatAudioFormat audio output format audio format
//
// swagger:model AudioOutputFormatAudioFormat
type AudioOutputFormatAudioFormat string

func NewAudioOutputFormatAudioFormat(value AudioOutputFormatAudioFormat) *AudioOutputFormatAudioFormat {
	return &value
}

// Pointer returns a pointer to a freshly-allocated AudioOutputFormatAudioFormat.
func (m AudioOutputFormatAudioFormat) Pointer() *AudioOutputFormatAudioFormat {
	return &m
}

const (

	// AudioOutputFormatAudioFormatNONE captures enum value "NONE"
	AudioOutputFormatAudioFormatNONE AudioOutputFormatAudioFormat = "NONE"

	// AudioOutputFormatAudioFormatMPEG captures enum value "MPEG"
	AudioOutputFormatAudioFormatMPEG AudioOutputFormatAudioFormat = "MPEG"
)

// for schema
var audioOutputFormatAudioFormatEnum []interface{}

func init() {
	var res []AudioOutputFormatAudioFormat
	if err := json.Unmarshal([]byte(`["NONE","MPEG"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		audioOutputFormatAudioFormatEnum = append(audioOutputFormatAudioFormatEnum, v)
	}
}

func (m AudioOutputFormatAudioFormat) validateAudioOutputFormatAudioFormatEnum(path, location string, value AudioOutputFormatAudioFormat) error {
	if err := validate.EnumCase(path, location, value, audioOutputFormatAudioFormatEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this audio output format audio format
func (m AudioOutputFormatAudioFormat) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateAudioOutputFormatAudioFormatEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this audio output format audio format based on context it is used
func (m AudioOutputFormatAudioFormat) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
