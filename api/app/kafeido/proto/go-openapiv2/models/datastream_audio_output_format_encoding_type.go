// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// DatastreamAudioOutputFormatEncodingType datastream audio output format encoding type
//
// swagger:model datastreamAudioOutputFormatEncodingType
type DatastreamAudioOutputFormatEncodingType string

func NewDatastreamAudioOutputFormatEncodingType(value DatastreamAudioOutputFormatEncodingType) *DatastreamAudioOutputFormatEncodingType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated DatastreamAudioOutputFormatEncodingType.
func (m DatastreamAudioOutputFormatEncodingType) Pointer() *DatastreamAudioOutputFormatEncodingType {
	return &m
}

const (

	// DatastreamAudioOutputFormatEncodingTypeNone captures enum value "None"
	DatastreamAudioOutputFormatEncodingTypeNone DatastreamAudioOutputFormatEncodingType = "None"

	// DatastreamAudioOutputFormatEncodingTypeRAW captures enum value "RAW"
	DatastreamAudioOutputFormatEncodingTypeRAW DatastreamAudioOutputFormatEncodingType = "RAW"

	// DatastreamAudioOutputFormatEncodingTypeBASE64 captures enum value "BASE64"
	DatastreamAudioOutputFormatEncodingTypeBASE64 DatastreamAudioOutputFormatEncodingType = "BASE64"
)

// for schema
var datastreamAudioOutputFormatEncodingTypeEnum []interface{}

func init() {
	var res []DatastreamAudioOutputFormatEncodingType
	if err := json.Unmarshal([]byte(`["None","RAW","BASE64"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		datastreamAudioOutputFormatEncodingTypeEnum = append(datastreamAudioOutputFormatEncodingTypeEnum, v)
	}
}

func (m DatastreamAudioOutputFormatEncodingType) validateDatastreamAudioOutputFormatEncodingTypeEnum(path, location string, value DatastreamAudioOutputFormatEncodingType) error {
	if err := validate.EnumCase(path, location, value, datastreamAudioOutputFormatEncodingTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this datastream audio output format encoding type
func (m DatastreamAudioOutputFormatEncodingType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateDatastreamAudioOutputFormatEncodingTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this datastream audio output format encoding type based on context it is used
func (m DatastreamAudioOutputFormatEncodingType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
