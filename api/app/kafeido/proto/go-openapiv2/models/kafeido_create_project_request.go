// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// KafeidoCreateProjectRequest kafeido create project request
//
// swagger:model kafeidoCreateProjectRequest
type KafeidoCreateProjectRequest struct {

	// desc
	Desc string `json:"desc,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// preferred private bucket name
	PreferredPrivateBucketName string `json:"preferredPrivateBucketName,omitempty"`

	// preferred project Id
	PreferredProjectID string `json:"preferredProjectId,omitempty"`

	// preferred public bucket name
	PreferredPublicBucketName string `json:"preferredPublicBucketName,omitempty"`

	// given when a project has been created
	ProjectID string `json:"projectId,omitempty"`

	// default public
	Visibility *AuthzTypeVisibility `json:"visibility,omitempty"`
}

// Validate validates this kafeido create project request
func (m *KafeidoCreateProjectRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateVisibility(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KafeidoCreateProjectRequest) validateVisibility(formats strfmt.Registry) error {
	if swag.IsZero(m.Visibility) { // not required
		return nil
	}

	if m.Visibility != nil {
		if err := m.Visibility.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("visibility")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("visibility")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this kafeido create project request based on the context it is used
func (m *KafeidoCreateProjectRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateVisibility(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KafeidoCreateProjectRequest) contextValidateVisibility(ctx context.Context, formats strfmt.Registry) error {

	if m.Visibility != nil {

		if swag.IsZero(m.Visibility) { // not required
			return nil
		}

		if err := m.Visibility.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("visibility")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("visibility")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *KafeidoCreateProjectRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *KafeidoCreateProjectRequest) UnmarshalBinary(b []byte) error {
	var res KafeidoCreateProjectRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
