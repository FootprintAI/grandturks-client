// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// AuthzTypeVisibility - TypeVisibility_Public: everyone can see it
//   - TypeVisibility_Team: limited group of people can see it
//   - TypeVisibility_OnlyOwner: only owner can see it
//
// swagger:model authzTypeVisibility
type AuthzTypeVisibility string

func NewAuthzTypeVisibility(value AuthzTypeVisibility) *AuthzTypeVisibility {
	return &value
}

// Pointer returns a pointer to a freshly-allocated AuthzTypeVisibility.
func (m AuthzTypeVisibility) Pointer() *AuthzTypeVisibility {
	return &m
}

const (

	// AuthzTypeVisibilityTypeVisibilityUnknown captures enum value "TypeVisibility_Unknown"
	AuthzTypeVisibilityTypeVisibilityUnknown AuthzTypeVisibility = "TypeVisibility_Unknown"

	// AuthzTypeVisibilityTypeVisibilityPublic captures enum value "TypeVisibility_Public"
	AuthzTypeVisibilityTypeVisibilityPublic AuthzTypeVisibility = "TypeVisibility_Public"

	// AuthzTypeVisibilityTypeVisibilityTeam captures enum value "TypeVisibility_Team"
	AuthzTypeVisibilityTypeVisibilityTeam AuthzTypeVisibility = "TypeVisibility_Team"

	// AuthzTypeVisibilityTypeVisibilityOnlyOwner captures enum value "TypeVisibility_OnlyOwner"
	AuthzTypeVisibilityTypeVisibilityOnlyOwner AuthzTypeVisibility = "TypeVisibility_OnlyOwner"
)

// for schema
var authzTypeVisibilityEnum []interface{}

func init() {
	var res []AuthzTypeVisibility
	if err := json.Unmarshal([]byte(`["TypeVisibility_Unknown","TypeVisibility_Public","TypeVisibility_Team","TypeVisibility_OnlyOwner"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		authzTypeVisibilityEnum = append(authzTypeVisibilityEnum, v)
	}
}

func (m AuthzTypeVisibility) validateAuthzTypeVisibilityEnum(path, location string, value AuthzTypeVisibility) error {
	if err := validate.EnumCase(path, location, value, authzTypeVisibilityEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this authz type visibility
func (m AuthzTypeVisibility) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateAuthzTypeVisibilityEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this authz type visibility based on context it is used
func (m AuthzTypeVisibility) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
