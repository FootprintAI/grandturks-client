// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// StreamingInfoProtocol streaming info protocol
//
// swagger:model StreamingInfoProtocol
type StreamingInfoProtocol string

func NewStreamingInfoProtocol(value StreamingInfoProtocol) *StreamingInfoProtocol {
	return &value
}

// Pointer returns a pointer to a freshly-allocated StreamingInfoProtocol.
func (m StreamingInfoProtocol) Pointer() *StreamingInfoProtocol {
	return &m
}

const (

	// StreamingInfoProtocolPROTOCOLSTREAMINGUNSPECIFIED captures enum value "PROTOCOL_STREAMING_UNSPECIFIED"
	StreamingInfoProtocolPROTOCOLSTREAMINGUNSPECIFIED StreamingInfoProtocol = "PROTOCOL_STREAMING_UNSPECIFIED"

	// StreamingInfoProtocolPROTOCOLSTREAMINGRTSP captures enum value "PROTOCOL_STREAMING_RTSP"
	StreamingInfoProtocolPROTOCOLSTREAMINGRTSP StreamingInfoProtocol = "PROTOCOL_STREAMING_RTSP"

	// StreamingInfoProtocolPROTOCOLSTREAMINGRTMP captures enum value "PROTOCOL_STREAMING_RTMP"
	StreamingInfoProtocolPROTOCOLSTREAMINGRTMP StreamingInfoProtocol = "PROTOCOL_STREAMING_RTMP"

	// StreamingInfoProtocolPROTOCOLSTREAMINGRTSPS captures enum value "PROTOCOL_STREAMING_RTSPS"
	StreamingInfoProtocolPROTOCOLSTREAMINGRTSPS StreamingInfoProtocol = "PROTOCOL_STREAMING_RTSPS"

	// StreamingInfoProtocolPROTOCOLSTREAMINGRTMPS captures enum value "PROTOCOL_STREAMING_RTMPS"
	StreamingInfoProtocolPROTOCOLSTREAMINGRTMPS StreamingInfoProtocol = "PROTOCOL_STREAMING_RTMPS"
)

// for schema
var streamingInfoProtocolEnum []interface{}

func init() {
	var res []StreamingInfoProtocol
	if err := json.Unmarshal([]byte(`["PROTOCOL_STREAMING_UNSPECIFIED","PROTOCOL_STREAMING_RTSP","PROTOCOL_STREAMING_RTMP","PROTOCOL_STREAMING_RTSPS","PROTOCOL_STREAMING_RTMPS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		streamingInfoProtocolEnum = append(streamingInfoProtocolEnum, v)
	}
}

func (m StreamingInfoProtocol) validateStreamingInfoProtocolEnum(path, location string, value StreamingInfoProtocol) error {
	if err := validate.EnumCase(path, location, value, streamingInfoProtocolEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this streaming info protocol
func (m StreamingInfoProtocol) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateStreamingInfoProtocolEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this streaming info protocol based on context it is used
func (m StreamingInfoProtocol) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
