// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// KafeidoGetProjectResponse kafeido get project response
//
// swagger:model kafeidoGetProjectResponse
type KafeidoGetProjectResponse struct {

	// desc
	Desc string `json:"desc,omitempty"`

	// experiment Id
	ExperimentID string `json:"experimentId,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// object store project private bucket name
	ObjectStoreProjectPrivateBucketName string `json:"objectStoreProjectPrivateBucketName,omitempty"`

	// object store project public bucket name
	ObjectStoreProjectPublicBucketName string `json:"objectStoreProjectPublicBucketName,omitempty"`

	// object store project user key
	ObjectStoreProjectUserKey string `json:"objectStoreProjectUserKey,omitempty"`

	// object store project user secret
	ObjectStoreProjectUserSecret string `json:"objectStoreProjectUserSecret,omitempty"`

	// project Id
	ProjectID string `json:"projectId,omitempty"`

	// status
	Status string `json:"status,omitempty"`

	// visibility
	Visibility *AuthzTypeVisibility `json:"visibility,omitempty"`
}

// Validate validates this kafeido get project response
func (m *KafeidoGetProjectResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateVisibility(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KafeidoGetProjectResponse) validateVisibility(formats strfmt.Registry) error {
	if swag.IsZero(m.Visibility) { // not required
		return nil
	}

	if m.Visibility != nil {
		if err := m.Visibility.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("visibility")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("visibility")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this kafeido get project response based on the context it is used
func (m *KafeidoGetProjectResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateVisibility(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KafeidoGetProjectResponse) contextValidateVisibility(ctx context.Context, formats strfmt.Registry) error {

	if m.Visibility != nil {

		if swag.IsZero(m.Visibility) { // not required
			return nil
		}

		if err := m.Visibility.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("visibility")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("visibility")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *KafeidoGetProjectResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *KafeidoGetProjectResponse) UnmarshalBinary(b []byte) error {
	var res KafeidoGetProjectResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
