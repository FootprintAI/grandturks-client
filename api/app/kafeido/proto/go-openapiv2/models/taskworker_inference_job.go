// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// TaskworkerInferenceJob taskworker inference job
//
// swagger:model taskworkerInferenceJob
type TaskworkerInferenceJob string

func NewTaskworkerInferenceJob(value TaskworkerInferenceJob) *TaskworkerInferenceJob {
	return &value
}

// Pointer returns a pointer to a freshly-allocated TaskworkerInferenceJob.
func (m TaskworkerInferenceJob) Pointer() *TaskworkerInferenceJob {
	return &m
}

const (

	// TaskworkerInferenceJobINFERENCEJOBNONE captures enum value "INFERENCEJOB_NONE"
	TaskworkerInferenceJobINFERENCEJOBNONE TaskworkerInferenceJob = "INFERENCEJOB_NONE"

	// TaskworkerInferenceJobINFERENCEJOBIMAGE captures enum value "INFERENCEJOB_IMAGE"
	TaskworkerInferenceJobINFERENCEJOBIMAGE TaskworkerInferenceJob = "INFERENCEJOB_IMAGE"

	// TaskworkerInferenceJobINFERENCEJOBAUDIO captures enum value "INFERENCEJOB_AUDIO"
	TaskworkerInferenceJobINFERENCEJOBAUDIO TaskworkerInferenceJob = "INFERENCEJOB_AUDIO"
)

// for schema
var taskworkerInferenceJobEnum []interface{}

func init() {
	var res []TaskworkerInferenceJob
	if err := json.Unmarshal([]byte(`["INFERENCEJOB_NONE","INFERENCEJOB_IMAGE","INFERENCEJOB_AUDIO"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		taskworkerInferenceJobEnum = append(taskworkerInferenceJobEnum, v)
	}
}

func (m TaskworkerInferenceJob) validateTaskworkerInferenceJobEnum(path, location string, value TaskworkerInferenceJob) error {
	if err := validate.EnumCase(path, location, value, taskworkerInferenceJobEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this taskworker inference job
func (m TaskworkerInferenceJob) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateTaskworkerInferenceJobEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this taskworker inference job based on context it is used
func (m TaskworkerInferenceJob) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
