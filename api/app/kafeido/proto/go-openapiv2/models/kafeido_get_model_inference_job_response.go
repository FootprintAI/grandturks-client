// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// KafeidoGetModelInferenceJobResponse kafeido get model inference job response
//
// swagger:model kafeidoGetModelInferenceJobResponse
type KafeidoGetModelInferenceJobResponse struct {

	// concurrent requests
	ConcurrentRequests int32 `json:"concurrentRequests,omitempty"`

	// data source Id
	DataSourceID string `json:"dataSourceId,omitempty"`

	// model inference Id
	ModelInferenceID string `json:"modelInferenceId,omitempty"`

	// model inference job ended at
	// Format: date-time
	ModelInferenceJobEndedAt strfmt.DateTime `json:"modelInferenceJobEndedAt,omitempty"`

	// model inference job Id
	ModelInferenceJobID string `json:"modelInferenceJobId,omitempty"`

	// model inference job started at
	// Format: date-time
	ModelInferenceJobStartedAt strfmt.DateTime `json:"modelInferenceJobStartedAt,omitempty"`

	// model inference job status
	ModelInferenceJobStatus string `json:"modelInferenceJobStatus,omitempty"`

	// project Id
	ProjectID string `json:"projectId,omitempty"`

	// sink destination
	SinkDestination *AppkafeidoDataSink `json:"sinkDestination,omitempty"`
}

// Validate validates this kafeido get model inference job response
func (m *KafeidoGetModelInferenceJobResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateModelInferenceJobEndedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModelInferenceJobStartedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSinkDestination(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KafeidoGetModelInferenceJobResponse) validateModelInferenceJobEndedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.ModelInferenceJobEndedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("modelInferenceJobEndedAt", "body", "date-time", m.ModelInferenceJobEndedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *KafeidoGetModelInferenceJobResponse) validateModelInferenceJobStartedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.ModelInferenceJobStartedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("modelInferenceJobStartedAt", "body", "date-time", m.ModelInferenceJobStartedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *KafeidoGetModelInferenceJobResponse) validateSinkDestination(formats strfmt.Registry) error {
	if swag.IsZero(m.SinkDestination) { // not required
		return nil
	}

	if m.SinkDestination != nil {
		if err := m.SinkDestination.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sinkDestination")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sinkDestination")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this kafeido get model inference job response based on the context it is used
func (m *KafeidoGetModelInferenceJobResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSinkDestination(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KafeidoGetModelInferenceJobResponse) contextValidateSinkDestination(ctx context.Context, formats strfmt.Registry) error {

	if m.SinkDestination != nil {

		if swag.IsZero(m.SinkDestination) { // not required
			return nil
		}

		if err := m.SinkDestination.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sinkDestination")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sinkDestination")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *KafeidoGetModelInferenceJobResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *KafeidoGetModelInferenceJobResponse) UnmarshalBinary(b []byte) error {
	var res KafeidoGetModelInferenceJobResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
