// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ImageOutputFormatPhotoFormat image output format photo format
//
// swagger:model ImageOutputFormatPhotoFormat
type ImageOutputFormatPhotoFormat string

func NewImageOutputFormatPhotoFormat(value ImageOutputFormatPhotoFormat) *ImageOutputFormatPhotoFormat {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ImageOutputFormatPhotoFormat.
func (m ImageOutputFormatPhotoFormat) Pointer() *ImageOutputFormatPhotoFormat {
	return &m
}

const (

	// ImageOutputFormatPhotoFormatJEPG captures enum value "JEPG"
	ImageOutputFormatPhotoFormatJEPG ImageOutputFormatPhotoFormat = "JEPG"

	// ImageOutputFormatPhotoFormatPNG captures enum value "PNG"
	ImageOutputFormatPhotoFormatPNG ImageOutputFormatPhotoFormat = "PNG"
)

// for schema
var imageOutputFormatPhotoFormatEnum []interface{}

func init() {
	var res []ImageOutputFormatPhotoFormat
	if err := json.Unmarshal([]byte(`["JEPG","PNG"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		imageOutputFormatPhotoFormatEnum = append(imageOutputFormatPhotoFormatEnum, v)
	}
}

func (m ImageOutputFormatPhotoFormat) validateImageOutputFormatPhotoFormatEnum(path, location string, value ImageOutputFormatPhotoFormat) error {
	if err := validate.EnumCase(path, location, value, imageOutputFormatPhotoFormatEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this image output format photo format
func (m ImageOutputFormatPhotoFormat) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateImageOutputFormatPhotoFormatEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this image output format photo format based on context it is used
func (m ImageOutputFormatPhotoFormat) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
