// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// KafeidoCreatePredictionResponse kafeido create prediction response
//
// swagger:model kafeidoCreatePredictionResponse
type KafeidoCreatePredictionResponse struct {

	// audio responses
	AudioResponses []*KafeidoPredictAudioResponseBody `json:"audioResponses"`

	// image responses
	ImageResponses []*KafeidoPredictImageResponseBody `json:"imageResponses"`

	// multimodal responses
	MultimodalResponses []*KafeidoPredictMultiModalResponseBody `json:"multimodalResponses"`

	// text responses
	TextResponses []*KafeidoPredictTextResponseBody `json:"textResponses"`
}

// Validate validates this kafeido create prediction response
func (m *KafeidoCreatePredictionResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAudioResponses(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImageResponses(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMultimodalResponses(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTextResponses(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KafeidoCreatePredictionResponse) validateAudioResponses(formats strfmt.Registry) error {
	if swag.IsZero(m.AudioResponses) { // not required
		return nil
	}

	for i := 0; i < len(m.AudioResponses); i++ {
		if swag.IsZero(m.AudioResponses[i]) { // not required
			continue
		}

		if m.AudioResponses[i] != nil {
			if err := m.AudioResponses[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("audioResponses" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("audioResponses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *KafeidoCreatePredictionResponse) validateImageResponses(formats strfmt.Registry) error {
	if swag.IsZero(m.ImageResponses) { // not required
		return nil
	}

	for i := 0; i < len(m.ImageResponses); i++ {
		if swag.IsZero(m.ImageResponses[i]) { // not required
			continue
		}

		if m.ImageResponses[i] != nil {
			if err := m.ImageResponses[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("imageResponses" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("imageResponses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *KafeidoCreatePredictionResponse) validateMultimodalResponses(formats strfmt.Registry) error {
	if swag.IsZero(m.MultimodalResponses) { // not required
		return nil
	}

	for i := 0; i < len(m.MultimodalResponses); i++ {
		if swag.IsZero(m.MultimodalResponses[i]) { // not required
			continue
		}

		if m.MultimodalResponses[i] != nil {
			if err := m.MultimodalResponses[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("multimodalResponses" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("multimodalResponses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *KafeidoCreatePredictionResponse) validateTextResponses(formats strfmt.Registry) error {
	if swag.IsZero(m.TextResponses) { // not required
		return nil
	}

	for i := 0; i < len(m.TextResponses); i++ {
		if swag.IsZero(m.TextResponses[i]) { // not required
			continue
		}

		if m.TextResponses[i] != nil {
			if err := m.TextResponses[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("textResponses" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("textResponses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this kafeido create prediction response based on the context it is used
func (m *KafeidoCreatePredictionResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAudioResponses(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateImageResponses(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMultimodalResponses(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTextResponses(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KafeidoCreatePredictionResponse) contextValidateAudioResponses(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AudioResponses); i++ {

		if m.AudioResponses[i] != nil {

			if swag.IsZero(m.AudioResponses[i]) { // not required
				return nil
			}

			if err := m.AudioResponses[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("audioResponses" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("audioResponses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *KafeidoCreatePredictionResponse) contextValidateImageResponses(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ImageResponses); i++ {

		if m.ImageResponses[i] != nil {

			if swag.IsZero(m.ImageResponses[i]) { // not required
				return nil
			}

			if err := m.ImageResponses[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("imageResponses" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("imageResponses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *KafeidoCreatePredictionResponse) contextValidateMultimodalResponses(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.MultimodalResponses); i++ {

		if m.MultimodalResponses[i] != nil {

			if swag.IsZero(m.MultimodalResponses[i]) { // not required
				return nil
			}

			if err := m.MultimodalResponses[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("multimodalResponses" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("multimodalResponses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *KafeidoCreatePredictionResponse) contextValidateTextResponses(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TextResponses); i++ {

		if m.TextResponses[i] != nil {

			if swag.IsZero(m.TextResponses[i]) { // not required
				return nil
			}

			if err := m.TextResponses[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("textResponses" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("textResponses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *KafeidoCreatePredictionResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *KafeidoCreatePredictionResponse) UnmarshalBinary(b []byte) error {
	var res KafeidoCreatePredictionResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
