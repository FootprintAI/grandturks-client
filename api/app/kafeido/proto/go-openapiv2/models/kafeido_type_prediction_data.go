// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// KafeidoTypePredictionData kafeido type prediction data
//
// swagger:model kafeidoTypePredictionData
type KafeidoTypePredictionData string

func NewKafeidoTypePredictionData(value KafeidoTypePredictionData) *KafeidoTypePredictionData {
	return &value
}

// Pointer returns a pointer to a freshly-allocated KafeidoTypePredictionData.
func (m KafeidoTypePredictionData) Pointer() *KafeidoTypePredictionData {
	return &m
}

const (

	// KafeidoTypePredictionDataTYPEPREDICTIONDATAUNSPECIFIED captures enum value "TYPE_PREDICTION_DATA_UNSPECIFIED"
	KafeidoTypePredictionDataTYPEPREDICTIONDATAUNSPECIFIED KafeidoTypePredictionData = "TYPE_PREDICTION_DATA_UNSPECIFIED"

	// KafeidoTypePredictionDataTYPEPREDICTIONDATAPHOTO captures enum value "TYPE_PREDICTION_DATA_PHOTO"
	KafeidoTypePredictionDataTYPEPREDICTIONDATAPHOTO KafeidoTypePredictionData = "TYPE_PREDICTION_DATA_PHOTO"

	// KafeidoTypePredictionDataTYPEPREDICTIONDATAAUDIO captures enum value "TYPE_PREDICTION_DATA_AUDIO"
	KafeidoTypePredictionDataTYPEPREDICTIONDATAAUDIO KafeidoTypePredictionData = "TYPE_PREDICTION_DATA_AUDIO"
)

// for schema
var kafeidoTypePredictionDataEnum []interface{}

func init() {
	var res []KafeidoTypePredictionData
	if err := json.Unmarshal([]byte(`["TYPE_PREDICTION_DATA_UNSPECIFIED","TYPE_PREDICTION_DATA_PHOTO","TYPE_PREDICTION_DATA_AUDIO"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		kafeidoTypePredictionDataEnum = append(kafeidoTypePredictionDataEnum, v)
	}
}

func (m KafeidoTypePredictionData) validateKafeidoTypePredictionDataEnum(path, location string, value KafeidoTypePredictionData) error {
	if err := validate.EnumCase(path, location, value, kafeidoTypePredictionDataEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this kafeido type prediction data
func (m KafeidoTypePredictionData) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateKafeidoTypePredictionDataEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this kafeido type prediction data based on context it is used
func (m KafeidoTypePredictionData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
