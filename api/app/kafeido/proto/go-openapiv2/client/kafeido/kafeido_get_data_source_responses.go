// Code generated by go-swagger; DO NOT EDIT.

package kafeido

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/footprintai/grandturks-client/v2/api/app/kafeido/proto/go-openapiv2/models"
)

// KafeidoGetDataSourceReader is a Reader for the KafeidoGetDataSource structure.
type KafeidoGetDataSourceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *KafeidoGetDataSourceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewKafeidoGetDataSourceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewKafeidoGetDataSourceDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewKafeidoGetDataSourceOK creates a KafeidoGetDataSourceOK with default headers values
func NewKafeidoGetDataSourceOK() *KafeidoGetDataSourceOK {
	return &KafeidoGetDataSourceOK{}
}

/*
KafeidoGetDataSourceOK describes a response with status code 200, with default header values.

A successful response.
*/
type KafeidoGetDataSourceOK struct {
	Payload *models.AppkafeidoGetDataSourceResponse
}

// IsSuccess returns true when this kafeido get data source o k response has a 2xx status code
func (o *KafeidoGetDataSourceOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this kafeido get data source o k response has a 3xx status code
func (o *KafeidoGetDataSourceOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this kafeido get data source o k response has a 4xx status code
func (o *KafeidoGetDataSourceOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this kafeido get data source o k response has a 5xx status code
func (o *KafeidoGetDataSourceOK) IsServerError() bool {
	return false
}

// IsCode returns true when this kafeido get data source o k response a status code equal to that given
func (o *KafeidoGetDataSourceOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the kafeido get data source o k response
func (o *KafeidoGetDataSourceOK) Code() int {
	return 200
}

func (o *KafeidoGetDataSourceOK) Error() string {
	return fmt.Sprintf("[GET /v1/projects/{projectId}/datasource/{dataSourceId}][%d] kafeidoGetDataSourceOK  %+v", 200, o.Payload)
}

func (o *KafeidoGetDataSourceOK) String() string {
	return fmt.Sprintf("[GET /v1/projects/{projectId}/datasource/{dataSourceId}][%d] kafeidoGetDataSourceOK  %+v", 200, o.Payload)
}

func (o *KafeidoGetDataSourceOK) GetPayload() *models.AppkafeidoGetDataSourceResponse {
	return o.Payload
}

func (o *KafeidoGetDataSourceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AppkafeidoGetDataSourceResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewKafeidoGetDataSourceDefault creates a KafeidoGetDataSourceDefault with default headers values
func NewKafeidoGetDataSourceDefault(code int) *KafeidoGetDataSourceDefault {
	return &KafeidoGetDataSourceDefault{
		_statusCode: code,
	}
}

/*
KafeidoGetDataSourceDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type KafeidoGetDataSourceDefault struct {
	_statusCode int

	Payload *models.RPCStatus
}

// IsSuccess returns true when this kafeido get data source default response has a 2xx status code
func (o *KafeidoGetDataSourceDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this kafeido get data source default response has a 3xx status code
func (o *KafeidoGetDataSourceDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this kafeido get data source default response has a 4xx status code
func (o *KafeidoGetDataSourceDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this kafeido get data source default response has a 5xx status code
func (o *KafeidoGetDataSourceDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this kafeido get data source default response a status code equal to that given
func (o *KafeidoGetDataSourceDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the kafeido get data source default response
func (o *KafeidoGetDataSourceDefault) Code() int {
	return o._statusCode
}

func (o *KafeidoGetDataSourceDefault) Error() string {
	return fmt.Sprintf("[GET /v1/projects/{projectId}/datasource/{dataSourceId}][%d] kafeido_GetDataSource default  %+v", o._statusCode, o.Payload)
}

func (o *KafeidoGetDataSourceDefault) String() string {
	return fmt.Sprintf("[GET /v1/projects/{projectId}/datasource/{dataSourceId}][%d] kafeido_GetDataSource default  %+v", o._statusCode, o.Payload)
}

func (o *KafeidoGetDataSourceDefault) GetPayload() *models.RPCStatus {
	return o.Payload
}

func (o *KafeidoGetDataSourceDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RPCStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
