// Code generated by go-swagger; DO NOT EDIT.

package kafeido

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/footprintai/grandturks-client/v2/api/app/kafeido/proto/go-openapiv2/models"
)

// KafeidoRunProjectPipelineReader is a Reader for the KafeidoRunProjectPipeline structure.
type KafeidoRunProjectPipelineReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *KafeidoRunProjectPipelineReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewKafeidoRunProjectPipelineOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewKafeidoRunProjectPipelineDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewKafeidoRunProjectPipelineOK creates a KafeidoRunProjectPipelineOK with default headers values
func NewKafeidoRunProjectPipelineOK() *KafeidoRunProjectPipelineOK {
	return &KafeidoRunProjectPipelineOK{}
}

/*
KafeidoRunProjectPipelineOK describes a response with status code 200, with default header values.

A successful response.
*/
type KafeidoRunProjectPipelineOK struct {
	Payload *models.KafeidoRunProjectPipelineResponse
}

// IsSuccess returns true when this kafeido run project pipeline o k response has a 2xx status code
func (o *KafeidoRunProjectPipelineOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this kafeido run project pipeline o k response has a 3xx status code
func (o *KafeidoRunProjectPipelineOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this kafeido run project pipeline o k response has a 4xx status code
func (o *KafeidoRunProjectPipelineOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this kafeido run project pipeline o k response has a 5xx status code
func (o *KafeidoRunProjectPipelineOK) IsServerError() bool {
	return false
}

// IsCode returns true when this kafeido run project pipeline o k response a status code equal to that given
func (o *KafeidoRunProjectPipelineOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the kafeido run project pipeline o k response
func (o *KafeidoRunProjectPipelineOK) Code() int {
	return 200
}

func (o *KafeidoRunProjectPipelineOK) Error() string {
	return fmt.Sprintf("[POST /v1/projects/{projectId}/pipelines/{namedPipelineId}/run][%d] kafeidoRunProjectPipelineOK  %+v", 200, o.Payload)
}

func (o *KafeidoRunProjectPipelineOK) String() string {
	return fmt.Sprintf("[POST /v1/projects/{projectId}/pipelines/{namedPipelineId}/run][%d] kafeidoRunProjectPipelineOK  %+v", 200, o.Payload)
}

func (o *KafeidoRunProjectPipelineOK) GetPayload() *models.KafeidoRunProjectPipelineResponse {
	return o.Payload
}

func (o *KafeidoRunProjectPipelineOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.KafeidoRunProjectPipelineResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewKafeidoRunProjectPipelineDefault creates a KafeidoRunProjectPipelineDefault with default headers values
func NewKafeidoRunProjectPipelineDefault(code int) *KafeidoRunProjectPipelineDefault {
	return &KafeidoRunProjectPipelineDefault{
		_statusCode: code,
	}
}

/*
KafeidoRunProjectPipelineDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type KafeidoRunProjectPipelineDefault struct {
	_statusCode int

	Payload *models.RPCStatus
}

// IsSuccess returns true when this kafeido run project pipeline default response has a 2xx status code
func (o *KafeidoRunProjectPipelineDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this kafeido run project pipeline default response has a 3xx status code
func (o *KafeidoRunProjectPipelineDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this kafeido run project pipeline default response has a 4xx status code
func (o *KafeidoRunProjectPipelineDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this kafeido run project pipeline default response has a 5xx status code
func (o *KafeidoRunProjectPipelineDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this kafeido run project pipeline default response a status code equal to that given
func (o *KafeidoRunProjectPipelineDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the kafeido run project pipeline default response
func (o *KafeidoRunProjectPipelineDefault) Code() int {
	return o._statusCode
}

func (o *KafeidoRunProjectPipelineDefault) Error() string {
	return fmt.Sprintf("[POST /v1/projects/{projectId}/pipelines/{namedPipelineId}/run][%d] kafeido_RunProjectPipeline default  %+v", o._statusCode, o.Payload)
}

func (o *KafeidoRunProjectPipelineDefault) String() string {
	return fmt.Sprintf("[POST /v1/projects/{projectId}/pipelines/{namedPipelineId}/run][%d] kafeido_RunProjectPipeline default  %+v", o._statusCode, o.Payload)
}

func (o *KafeidoRunProjectPipelineDefault) GetPayload() *models.RPCStatus {
	return o.Payload
}

func (o *KafeidoRunProjectPipelineDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RPCStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
KafeidoRunProjectPipelineBody kafeido run project pipeline body
swagger:model KafeidoRunProjectPipelineBody
*/
type KafeidoRunProjectPipelineBody struct {

	// parameters
	Parameters map[string]string `json:"parameters,omitempty"`
}

// Validate validates this kafeido run project pipeline body
func (o *KafeidoRunProjectPipelineBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this kafeido run project pipeline body based on context it is used
func (o *KafeidoRunProjectPipelineBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *KafeidoRunProjectPipelineBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *KafeidoRunProjectPipelineBody) UnmarshalBinary(b []byte) error {
	var res KafeidoRunProjectPipelineBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
