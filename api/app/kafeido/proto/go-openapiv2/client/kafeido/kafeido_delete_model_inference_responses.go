// Code generated by go-swagger; DO NOT EDIT.

package kafeido

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/footprintai/grandturks-client/v2/api/app/kafeido/proto/go-openapiv2/models"
)

// KafeidoDeleteModelInferenceReader is a Reader for the KafeidoDeleteModelInference structure.
type KafeidoDeleteModelInferenceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *KafeidoDeleteModelInferenceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewKafeidoDeleteModelInferenceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewKafeidoDeleteModelInferenceDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewKafeidoDeleteModelInferenceOK creates a KafeidoDeleteModelInferenceOK with default headers values
func NewKafeidoDeleteModelInferenceOK() *KafeidoDeleteModelInferenceOK {
	return &KafeidoDeleteModelInferenceOK{}
}

/*
KafeidoDeleteModelInferenceOK describes a response with status code 200, with default header values.

A successful response.
*/
type KafeidoDeleteModelInferenceOK struct {
	Payload models.KafeidoDeleteModelInferenceResponse
}

// IsSuccess returns true when this kafeido delete model inference o k response has a 2xx status code
func (o *KafeidoDeleteModelInferenceOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this kafeido delete model inference o k response has a 3xx status code
func (o *KafeidoDeleteModelInferenceOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this kafeido delete model inference o k response has a 4xx status code
func (o *KafeidoDeleteModelInferenceOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this kafeido delete model inference o k response has a 5xx status code
func (o *KafeidoDeleteModelInferenceOK) IsServerError() bool {
	return false
}

// IsCode returns true when this kafeido delete model inference o k response a status code equal to that given
func (o *KafeidoDeleteModelInferenceOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the kafeido delete model inference o k response
func (o *KafeidoDeleteModelInferenceOK) Code() int {
	return 200
}

func (o *KafeidoDeleteModelInferenceOK) Error() string {
	return fmt.Sprintf("[DELETE /v1/projects/{projectId}/inference/{modelInferenceId}][%d] kafeidoDeleteModelInferenceOK  %+v", 200, o.Payload)
}

func (o *KafeidoDeleteModelInferenceOK) String() string {
	return fmt.Sprintf("[DELETE /v1/projects/{projectId}/inference/{modelInferenceId}][%d] kafeidoDeleteModelInferenceOK  %+v", 200, o.Payload)
}

func (o *KafeidoDeleteModelInferenceOK) GetPayload() models.KafeidoDeleteModelInferenceResponse {
	return o.Payload
}

func (o *KafeidoDeleteModelInferenceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewKafeidoDeleteModelInferenceDefault creates a KafeidoDeleteModelInferenceDefault with default headers values
func NewKafeidoDeleteModelInferenceDefault(code int) *KafeidoDeleteModelInferenceDefault {
	return &KafeidoDeleteModelInferenceDefault{
		_statusCode: code,
	}
}

/*
KafeidoDeleteModelInferenceDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type KafeidoDeleteModelInferenceDefault struct {
	_statusCode int

	Payload *models.RPCStatus
}

// IsSuccess returns true when this kafeido delete model inference default response has a 2xx status code
func (o *KafeidoDeleteModelInferenceDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this kafeido delete model inference default response has a 3xx status code
func (o *KafeidoDeleteModelInferenceDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this kafeido delete model inference default response has a 4xx status code
func (o *KafeidoDeleteModelInferenceDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this kafeido delete model inference default response has a 5xx status code
func (o *KafeidoDeleteModelInferenceDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this kafeido delete model inference default response a status code equal to that given
func (o *KafeidoDeleteModelInferenceDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the kafeido delete model inference default response
func (o *KafeidoDeleteModelInferenceDefault) Code() int {
	return o._statusCode
}

func (o *KafeidoDeleteModelInferenceDefault) Error() string {
	return fmt.Sprintf("[DELETE /v1/projects/{projectId}/inference/{modelInferenceId}][%d] kafeido_DeleteModelInference default  %+v", o._statusCode, o.Payload)
}

func (o *KafeidoDeleteModelInferenceDefault) String() string {
	return fmt.Sprintf("[DELETE /v1/projects/{projectId}/inference/{modelInferenceId}][%d] kafeido_DeleteModelInference default  %+v", o._statusCode, o.Payload)
}

func (o *KafeidoDeleteModelInferenceDefault) GetPayload() *models.RPCStatus {
	return o.Payload
}

func (o *KafeidoDeleteModelInferenceDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RPCStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
