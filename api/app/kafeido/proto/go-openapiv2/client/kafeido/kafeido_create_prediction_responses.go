// Code generated by go-swagger; DO NOT EDIT.

package kafeido

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/footprintai/grandturks-client/v2/api/app/kafeido/proto/go-openapiv2/models"
)

// KafeidoCreatePredictionReader is a Reader for the KafeidoCreatePrediction structure.
type KafeidoCreatePredictionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *KafeidoCreatePredictionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewKafeidoCreatePredictionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewKafeidoCreatePredictionDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewKafeidoCreatePredictionOK creates a KafeidoCreatePredictionOK with default headers values
func NewKafeidoCreatePredictionOK() *KafeidoCreatePredictionOK {
	return &KafeidoCreatePredictionOK{}
}

/*
KafeidoCreatePredictionOK describes a response with status code 200, with default header values.

A successful response.
*/
type KafeidoCreatePredictionOK struct {
	Payload *models.KafeidoCreatePredictionResponse
}

// IsSuccess returns true when this kafeido create prediction o k response has a 2xx status code
func (o *KafeidoCreatePredictionOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this kafeido create prediction o k response has a 3xx status code
func (o *KafeidoCreatePredictionOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this kafeido create prediction o k response has a 4xx status code
func (o *KafeidoCreatePredictionOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this kafeido create prediction o k response has a 5xx status code
func (o *KafeidoCreatePredictionOK) IsServerError() bool {
	return false
}

// IsCode returns true when this kafeido create prediction o k response a status code equal to that given
func (o *KafeidoCreatePredictionOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the kafeido create prediction o k response
func (o *KafeidoCreatePredictionOK) Code() int {
	return 200
}

func (o *KafeidoCreatePredictionOK) Error() string {
	return fmt.Sprintf("[POST /v1/projects/{projectId}/inference/{modelInferenceId}:predict][%d] kafeidoCreatePredictionOK  %+v", 200, o.Payload)
}

func (o *KafeidoCreatePredictionOK) String() string {
	return fmt.Sprintf("[POST /v1/projects/{projectId}/inference/{modelInferenceId}:predict][%d] kafeidoCreatePredictionOK  %+v", 200, o.Payload)
}

func (o *KafeidoCreatePredictionOK) GetPayload() *models.KafeidoCreatePredictionResponse {
	return o.Payload
}

func (o *KafeidoCreatePredictionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.KafeidoCreatePredictionResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewKafeidoCreatePredictionDefault creates a KafeidoCreatePredictionDefault with default headers values
func NewKafeidoCreatePredictionDefault(code int) *KafeidoCreatePredictionDefault {
	return &KafeidoCreatePredictionDefault{
		_statusCode: code,
	}
}

/*
KafeidoCreatePredictionDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type KafeidoCreatePredictionDefault struct {
	_statusCode int

	Payload *models.RPCStatus
}

// IsSuccess returns true when this kafeido create prediction default response has a 2xx status code
func (o *KafeidoCreatePredictionDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this kafeido create prediction default response has a 3xx status code
func (o *KafeidoCreatePredictionDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this kafeido create prediction default response has a 4xx status code
func (o *KafeidoCreatePredictionDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this kafeido create prediction default response has a 5xx status code
func (o *KafeidoCreatePredictionDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this kafeido create prediction default response a status code equal to that given
func (o *KafeidoCreatePredictionDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the kafeido create prediction default response
func (o *KafeidoCreatePredictionDefault) Code() int {
	return o._statusCode
}

func (o *KafeidoCreatePredictionDefault) Error() string {
	return fmt.Sprintf("[POST /v1/projects/{projectId}/inference/{modelInferenceId}:predict][%d] kafeido_CreatePrediction default  %+v", o._statusCode, o.Payload)
}

func (o *KafeidoCreatePredictionDefault) String() string {
	return fmt.Sprintf("[POST /v1/projects/{projectId}/inference/{modelInferenceId}:predict][%d] kafeido_CreatePrediction default  %+v", o._statusCode, o.Payload)
}

func (o *KafeidoCreatePredictionDefault) GetPayload() *models.RPCStatus {
	return o.Payload
}

func (o *KafeidoCreatePredictionDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RPCStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
KafeidoCreatePredictionBody kafeido create prediction body
swagger:model KafeidoCreatePredictionBody
*/
type KafeidoCreatePredictionBody struct {

	// audio requests
	AudioRequests []*models.KafeidoPredictAudioRequestBody `json:"audioRequests"`

	// concurrency
	Concurrency int32 `json:"concurrency,omitempty"`

	// image requests
	ImageRequests []*models.KafeidoPredictImageRequestBody `json:"imageRequests"`

	// timeout
	Timeout string `json:"timeout,omitempty"`

	// type
	Type *models.KafeidoTypePredictionData `json:"type,omitempty"`
}

// Validate validates this kafeido create prediction body
func (o *KafeidoCreatePredictionBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAudioRequests(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateImageRequests(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *KafeidoCreatePredictionBody) validateAudioRequests(formats strfmt.Registry) error {
	if swag.IsZero(o.AudioRequests) { // not required
		return nil
	}

	for i := 0; i < len(o.AudioRequests); i++ {
		if swag.IsZero(o.AudioRequests[i]) { // not required
			continue
		}

		if o.AudioRequests[i] != nil {
			if err := o.AudioRequests[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "audioRequests" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "audioRequests" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *KafeidoCreatePredictionBody) validateImageRequests(formats strfmt.Registry) error {
	if swag.IsZero(o.ImageRequests) { // not required
		return nil
	}

	for i := 0; i < len(o.ImageRequests); i++ {
		if swag.IsZero(o.ImageRequests[i]) { // not required
			continue
		}

		if o.ImageRequests[i] != nil {
			if err := o.ImageRequests[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "imageRequests" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "imageRequests" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *KafeidoCreatePredictionBody) validateType(formats strfmt.Registry) error {
	if swag.IsZero(o.Type) { // not required
		return nil
	}

	if o.Type != nil {
		if err := o.Type.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "type")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this kafeido create prediction body based on the context it is used
func (o *KafeidoCreatePredictionBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAudioRequests(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateImageRequests(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *KafeidoCreatePredictionBody) contextValidateAudioRequests(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.AudioRequests); i++ {

		if o.AudioRequests[i] != nil {

			if swag.IsZero(o.AudioRequests[i]) { // not required
				return nil
			}

			if err := o.AudioRequests[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "audioRequests" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "audioRequests" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *KafeidoCreatePredictionBody) contextValidateImageRequests(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.ImageRequests); i++ {

		if o.ImageRequests[i] != nil {

			if swag.IsZero(o.ImageRequests[i]) { // not required
				return nil
			}

			if err := o.ImageRequests[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "imageRequests" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "imageRequests" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *KafeidoCreatePredictionBody) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if o.Type != nil {

		if swag.IsZero(o.Type) { // not required
			return nil
		}

		if err := o.Type.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "type")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *KafeidoCreatePredictionBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *KafeidoCreatePredictionBody) UnmarshalBinary(b []byte) error {
	var res KafeidoCreatePredictionBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
