// Code generated by go-swagger; DO NOT EDIT.

package kafeido

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/footprintai/grandturks-client/v2/api/app/kafeido/proto/go-openapiv2/models"
)

// KafeidoPutProjectReader is a Reader for the KafeidoPutProject structure.
type KafeidoPutProjectReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *KafeidoPutProjectReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewKafeidoPutProjectOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewKafeidoPutProjectDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewKafeidoPutProjectOK creates a KafeidoPutProjectOK with default headers values
func NewKafeidoPutProjectOK() *KafeidoPutProjectOK {
	return &KafeidoPutProjectOK{}
}

/*
KafeidoPutProjectOK describes a response with status code 200, with default header values.

A successful response.
*/
type KafeidoPutProjectOK struct {
	Payload models.KafeidoPutProjectResponse
}

// IsSuccess returns true when this kafeido put project o k response has a 2xx status code
func (o *KafeidoPutProjectOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this kafeido put project o k response has a 3xx status code
func (o *KafeidoPutProjectOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this kafeido put project o k response has a 4xx status code
func (o *KafeidoPutProjectOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this kafeido put project o k response has a 5xx status code
func (o *KafeidoPutProjectOK) IsServerError() bool {
	return false
}

// IsCode returns true when this kafeido put project o k response a status code equal to that given
func (o *KafeidoPutProjectOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the kafeido put project o k response
func (o *KafeidoPutProjectOK) Code() int {
	return 200
}

func (o *KafeidoPutProjectOK) Error() string {
	return fmt.Sprintf("[PUT /v1/projects/{projectId}][%d] kafeidoPutProjectOK  %+v", 200, o.Payload)
}

func (o *KafeidoPutProjectOK) String() string {
	return fmt.Sprintf("[PUT /v1/projects/{projectId}][%d] kafeidoPutProjectOK  %+v", 200, o.Payload)
}

func (o *KafeidoPutProjectOK) GetPayload() models.KafeidoPutProjectResponse {
	return o.Payload
}

func (o *KafeidoPutProjectOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewKafeidoPutProjectDefault creates a KafeidoPutProjectDefault with default headers values
func NewKafeidoPutProjectDefault(code int) *KafeidoPutProjectDefault {
	return &KafeidoPutProjectDefault{
		_statusCode: code,
	}
}

/*
KafeidoPutProjectDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type KafeidoPutProjectDefault struct {
	_statusCode int

	Payload *models.RPCStatus
}

// IsSuccess returns true when this kafeido put project default response has a 2xx status code
func (o *KafeidoPutProjectDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this kafeido put project default response has a 3xx status code
func (o *KafeidoPutProjectDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this kafeido put project default response has a 4xx status code
func (o *KafeidoPutProjectDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this kafeido put project default response has a 5xx status code
func (o *KafeidoPutProjectDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this kafeido put project default response a status code equal to that given
func (o *KafeidoPutProjectDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the kafeido put project default response
func (o *KafeidoPutProjectDefault) Code() int {
	return o._statusCode
}

func (o *KafeidoPutProjectDefault) Error() string {
	return fmt.Sprintf("[PUT /v1/projects/{projectId}][%d] kafeido_PutProject default  %+v", o._statusCode, o.Payload)
}

func (o *KafeidoPutProjectDefault) String() string {
	return fmt.Sprintf("[PUT /v1/projects/{projectId}][%d] kafeido_PutProject default  %+v", o._statusCode, o.Payload)
}

func (o *KafeidoPutProjectDefault) GetPayload() *models.RPCStatus {
	return o.Payload
}

func (o *KafeidoPutProjectDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RPCStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
KafeidoPutProjectBody kafeido put project body
swagger:model KafeidoPutProjectBody
*/
type KafeidoPutProjectBody struct {

	// default public
	Visibility *models.AuthzTypeVisibility `json:"visibility,omitempty"`
}

// Validate validates this kafeido put project body
func (o *KafeidoPutProjectBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateVisibility(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *KafeidoPutProjectBody) validateVisibility(formats strfmt.Registry) error {
	if swag.IsZero(o.Visibility) { // not required
		return nil
	}

	if o.Visibility != nil {
		if err := o.Visibility.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "visibility")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "visibility")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this kafeido put project body based on the context it is used
func (o *KafeidoPutProjectBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateVisibility(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *KafeidoPutProjectBody) contextValidateVisibility(ctx context.Context, formats strfmt.Registry) error {

	if o.Visibility != nil {

		if swag.IsZero(o.Visibility) { // not required
			return nil
		}

		if err := o.Visibility.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "visibility")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "visibility")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *KafeidoPutProjectBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *KafeidoPutProjectBody) UnmarshalBinary(b []byte) error {
	var res KafeidoPutProjectBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
