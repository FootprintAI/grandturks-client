// Code generated by go-swagger; DO NOT EDIT.

package kafeido

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewKafeidoGetModelInferenceParams creates a new KafeidoGetModelInferenceParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewKafeidoGetModelInferenceParams() *KafeidoGetModelInferenceParams {
	return &KafeidoGetModelInferenceParams{
		requestTimeout: cr.DefaultTimeout,
	}
}

// NewKafeidoGetModelInferenceParamsWithTimeout creates a new KafeidoGetModelInferenceParams object
// with the ability to set a timeout on a request.
func NewKafeidoGetModelInferenceParamsWithTimeout(timeout time.Duration) *KafeidoGetModelInferenceParams {
	return &KafeidoGetModelInferenceParams{
		requestTimeout: timeout,
	}
}

// NewKafeidoGetModelInferenceParamsWithContext creates a new KafeidoGetModelInferenceParams object
// with the ability to set a context for a request.
func NewKafeidoGetModelInferenceParamsWithContext(ctx context.Context) *KafeidoGetModelInferenceParams {
	return &KafeidoGetModelInferenceParams{
		Context: ctx,
	}
}

// NewKafeidoGetModelInferenceParamsWithHTTPClient creates a new KafeidoGetModelInferenceParams object
// with the ability to set a custom HTTPClient for a request.
func NewKafeidoGetModelInferenceParamsWithHTTPClient(client *http.Client) *KafeidoGetModelInferenceParams {
	return &KafeidoGetModelInferenceParams{
		HTTPClient: client,
	}
}

/*
KafeidoGetModelInferenceParams contains all the parameters to send to the API endpoint

	for the kafeido get model inference operation.

	Typically these are written to a http.Request.
*/
type KafeidoGetModelInferenceParams struct {

	// ModelInferenceID.
	ModelInferenceID string

	// ProjectID.
	ProjectID string

	// Timeout.
	Timeout *string

	requestTimeout time.Duration
	Context        context.Context
	HTTPClient     *http.Client
}

// WithDefaults hydrates default values in the kafeido get model inference params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *KafeidoGetModelInferenceParams) WithDefaults() *KafeidoGetModelInferenceParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the kafeido get model inference params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *KafeidoGetModelInferenceParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithRequestTimeout adds the timeout to the kafeido get model inference params
func (o *KafeidoGetModelInferenceParams) WithRequestTimeout(timeout time.Duration) *KafeidoGetModelInferenceParams {
	o.SetRequestTimeout(timeout)
	return o
}

// SetRequestTimeout adds the timeout to the kafeido get model inference params
func (o *KafeidoGetModelInferenceParams) SetRequestTimeout(timeout time.Duration) {
	o.requestTimeout = timeout
}

// WithContext adds the context to the kafeido get model inference params
func (o *KafeidoGetModelInferenceParams) WithContext(ctx context.Context) *KafeidoGetModelInferenceParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the kafeido get model inference params
func (o *KafeidoGetModelInferenceParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the kafeido get model inference params
func (o *KafeidoGetModelInferenceParams) WithHTTPClient(client *http.Client) *KafeidoGetModelInferenceParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the kafeido get model inference params
func (o *KafeidoGetModelInferenceParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithModelInferenceID adds the modelInferenceID to the kafeido get model inference params
func (o *KafeidoGetModelInferenceParams) WithModelInferenceID(modelInferenceID string) *KafeidoGetModelInferenceParams {
	o.SetModelInferenceID(modelInferenceID)
	return o
}

// SetModelInferenceID adds the modelInferenceId to the kafeido get model inference params
func (o *KafeidoGetModelInferenceParams) SetModelInferenceID(modelInferenceID string) {
	o.ModelInferenceID = modelInferenceID
}

// WithProjectID adds the projectID to the kafeido get model inference params
func (o *KafeidoGetModelInferenceParams) WithProjectID(projectID string) *KafeidoGetModelInferenceParams {
	o.SetProjectID(projectID)
	return o
}

// SetProjectID adds the projectId to the kafeido get model inference params
func (o *KafeidoGetModelInferenceParams) SetProjectID(projectID string) {
	o.ProjectID = projectID
}

// WithTimeout adds the timeout to the kafeido get model inference params
func (o *KafeidoGetModelInferenceParams) WithTimeout(timeout *string) *KafeidoGetModelInferenceParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the kafeido get model inference params
func (o *KafeidoGetModelInferenceParams) SetTimeout(timeout *string) {
	o.Timeout = timeout
}

// WriteToRequest writes these params to a swagger request
func (o *KafeidoGetModelInferenceParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.requestTimeout); err != nil {
		return err
	}
	var res []error

	// path param modelInferenceId
	if err := r.SetPathParam("modelInferenceId", o.ModelInferenceID); err != nil {
		return err
	}

	// path param projectId
	if err := r.SetPathParam("projectId", o.ProjectID); err != nil {
		return err
	}

	if o.Timeout != nil {

		// query param timeout
		var qrTimeout string

		if o.Timeout != nil {
			qrTimeout = *o.Timeout
		}
		qTimeout := qrTimeout
		if qTimeout != "" {

			if err := r.SetQueryParam("timeout", qTimeout); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
