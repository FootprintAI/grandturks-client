// Code generated by go-swagger; DO NOT EDIT.

package kafeido

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new kafeido API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for kafeido API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	KafeidoAppLogin(params *KafeidoAppLoginParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KafeidoAppLoginOK, error)

	KafeidoCancelModelInferenceJob(params *KafeidoCancelModelInferenceJobParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KafeidoCancelModelInferenceJobOK, error)

	KafeidoCreateDataSource(params *KafeidoCreateDataSourceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KafeidoCreateDataSourceOK, error)

	KafeidoCreateModelInference(params *KafeidoCreateModelInferenceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KafeidoCreateModelInferenceOK, error)

	KafeidoCreateModelInferenceJob(params *KafeidoCreateModelInferenceJobParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KafeidoCreateModelInferenceJobOK, error)

	KafeidoCreatePrediction(params *KafeidoCreatePredictionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KafeidoCreatePredictionOK, error)

	KafeidoCreateProject(params *KafeidoCreateProjectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KafeidoCreateProjectOK, error)

	KafeidoCreateProjectPipeline(params *KafeidoCreateProjectPipelineParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KafeidoCreateProjectPipelineOK, error)

	KafeidoCreateUser(params *KafeidoCreateUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KafeidoCreateUserOK, error)

	KafeidoDeleteDataSource(params *KafeidoDeleteDataSourceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KafeidoDeleteDataSourceOK, error)

	KafeidoDeleteModelInference(params *KafeidoDeleteModelInferenceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KafeidoDeleteModelInferenceOK, error)

	KafeidoDeleteModelInferenceJob(params *KafeidoDeleteModelInferenceJobParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KafeidoDeleteModelInferenceJobOK, error)

	KafeidoDeleteProject(params *KafeidoDeleteProjectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KafeidoDeleteProjectOK, error)

	KafeidoDeleteProjectPipeline(params *KafeidoDeleteProjectPipelineParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KafeidoDeleteProjectPipelineOK, error)

	KafeidoGetDataSource(params *KafeidoGetDataSourceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KafeidoGetDataSourceOK, error)

	KafeidoGetModelInference(params *KafeidoGetModelInferenceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KafeidoGetModelInferenceOK, error)

	KafeidoGetModelInferenceJob(params *KafeidoGetModelInferenceJobParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KafeidoGetModelInferenceJobOK, error)

	KafeidoGetProject(params *KafeidoGetProjectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KafeidoGetProjectOK, error)

	KafeidoGetProjectPipeline(params *KafeidoGetProjectPipelineParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KafeidoGetProjectPipelineOK, error)

	KafeidoGetUser(params *KafeidoGetUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KafeidoGetUserOK, error)

	KafeidoListDataSource(params *KafeidoListDataSourceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KafeidoListDataSourceOK, error)

	KafeidoListModelInference(params *KafeidoListModelInferenceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KafeidoListModelInferenceOK, error)

	KafeidoListModelInferenceJob(params *KafeidoListModelInferenceJobParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KafeidoListModelInferenceJobOK, error)

	KafeidoListProjectPipeline(params *KafeidoListProjectPipelineParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KafeidoListProjectPipelineOK, error)

	KafeidoListProjects(params *KafeidoListProjectsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KafeidoListProjectsOK, error)

	KafeidoPutProject(params *KafeidoPutProjectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KafeidoPutProjectOK, error)

	KafeidoPutProjectPipeline(params *KafeidoPutProjectPipelineParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KafeidoPutProjectPipelineOK, error)

	KafeidoRunProjectPipeline(params *KafeidoRunProjectPipelineParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KafeidoRunProjectPipelineOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
KafeidoAppLogin kafeido app login API
*/
func (a *Client) KafeidoAppLogin(params *KafeidoAppLoginParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KafeidoAppLoginOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKafeidoAppLoginParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "kafeido_AppLogin",
		Method:             "POST",
		PathPattern:        "/v1/login",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &KafeidoAppLoginReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KafeidoAppLoginOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*KafeidoAppLoginDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
KafeidoCancelModelInferenceJob kafeido cancel model inference job API
*/
func (a *Client) KafeidoCancelModelInferenceJob(params *KafeidoCancelModelInferenceJobParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KafeidoCancelModelInferenceJobOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKafeidoCancelModelInferenceJobParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "kafeido_CancelModelInferenceJob",
		Method:             "POST",
		PathPattern:        "/v1/projects/{projectId}/job/{modelInferenceJobId}:cancel",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &KafeidoCancelModelInferenceJobReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KafeidoCancelModelInferenceJobOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*KafeidoCancelModelInferenceJobDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
KafeidoCreateDataSource kafeido create data source API
*/
func (a *Client) KafeidoCreateDataSource(params *KafeidoCreateDataSourceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KafeidoCreateDataSourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKafeidoCreateDataSourceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "kafeido_CreateDataSource",
		Method:             "POST",
		PathPattern:        "/v1/projects/{projectId}/datasource",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &KafeidoCreateDataSourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KafeidoCreateDataSourceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*KafeidoCreateDataSourceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
KafeidoCreateModelInference kafeido create model inference API
*/
func (a *Client) KafeidoCreateModelInference(params *KafeidoCreateModelInferenceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KafeidoCreateModelInferenceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKafeidoCreateModelInferenceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "kafeido_CreateModelInference",
		Method:             "POST",
		PathPattern:        "/v1/projects/{projectId}/inference",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &KafeidoCreateModelInferenceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KafeidoCreateModelInferenceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*KafeidoCreateModelInferenceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
KafeidoCreateModelInferenceJob kafeido create model inference job API
*/
func (a *Client) KafeidoCreateModelInferenceJob(params *KafeidoCreateModelInferenceJobParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KafeidoCreateModelInferenceJobOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKafeidoCreateModelInferenceJobParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "kafeido_CreateModelInferenceJob",
		Method:             "POST",
		PathPattern:        "/v1/projects/{projectId}/job",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &KafeidoCreateModelInferenceJobReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KafeidoCreateModelInferenceJobOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*KafeidoCreateModelInferenceJobDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
KafeidoCreatePrediction kafeido create prediction API
*/
func (a *Client) KafeidoCreatePrediction(params *KafeidoCreatePredictionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KafeidoCreatePredictionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKafeidoCreatePredictionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "kafeido_CreatePrediction",
		Method:             "POST",
		PathPattern:        "/v1/projects/{projectId}/inference/{modelInferenceId}:predict",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &KafeidoCreatePredictionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KafeidoCreatePredictionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*KafeidoCreatePredictionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
KafeidoCreateProject kafeido create project API
*/
func (a *Client) KafeidoCreateProject(params *KafeidoCreateProjectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KafeidoCreateProjectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKafeidoCreateProjectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "kafeido_CreateProject",
		Method:             "POST",
		PathPattern:        "/v1/projects",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &KafeidoCreateProjectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KafeidoCreateProjectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*KafeidoCreateProjectDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
KafeidoCreateProjectPipeline kafeido create project pipeline API
*/
func (a *Client) KafeidoCreateProjectPipeline(params *KafeidoCreateProjectPipelineParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KafeidoCreateProjectPipelineOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKafeidoCreateProjectPipelineParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "kafeido_CreateProjectPipeline",
		Method:             "POST",
		PathPattern:        "/v1/projects/{projectId}/pipelines",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &KafeidoCreateProjectPipelineReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KafeidoCreateProjectPipelineOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*KafeidoCreateProjectPipelineDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
KafeidoCreateUser kafeido create user API
*/
func (a *Client) KafeidoCreateUser(params *KafeidoCreateUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KafeidoCreateUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKafeidoCreateUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "kafeido_CreateUser",
		Method:             "POST",
		PathPattern:        "/v1/user",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &KafeidoCreateUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KafeidoCreateUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*KafeidoCreateUserDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
KafeidoDeleteDataSource kafeido delete data source API
*/
func (a *Client) KafeidoDeleteDataSource(params *KafeidoDeleteDataSourceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KafeidoDeleteDataSourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKafeidoDeleteDataSourceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "kafeido_DeleteDataSource",
		Method:             "DELETE",
		PathPattern:        "/v1/projects/{projectId}/datasource/{dataSourceId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &KafeidoDeleteDataSourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KafeidoDeleteDataSourceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*KafeidoDeleteDataSourceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
KafeidoDeleteModelInference kafeido delete model inference API
*/
func (a *Client) KafeidoDeleteModelInference(params *KafeidoDeleteModelInferenceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KafeidoDeleteModelInferenceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKafeidoDeleteModelInferenceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "kafeido_DeleteModelInference",
		Method:             "DELETE",
		PathPattern:        "/v1/projects/{projectId}/inference/{modelInferenceId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &KafeidoDeleteModelInferenceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KafeidoDeleteModelInferenceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*KafeidoDeleteModelInferenceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
KafeidoDeleteModelInferenceJob kafeido delete model inference job API
*/
func (a *Client) KafeidoDeleteModelInferenceJob(params *KafeidoDeleteModelInferenceJobParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KafeidoDeleteModelInferenceJobOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKafeidoDeleteModelInferenceJobParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "kafeido_DeleteModelInferenceJob",
		Method:             "DELETE",
		PathPattern:        "/v1/projects/{projectId}/job/{modelInferenceJobId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &KafeidoDeleteModelInferenceJobReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KafeidoDeleteModelInferenceJobOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*KafeidoDeleteModelInferenceJobDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
KafeidoDeleteProject rpcs get project model get project model request returns get project model response option google api http get v1 projects project Id model get
*/
func (a *Client) KafeidoDeleteProject(params *KafeidoDeleteProjectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KafeidoDeleteProjectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKafeidoDeleteProjectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "kafeido_DeleteProject",
		Method:             "DELETE",
		PathPattern:        "/v1/projects/{projectId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &KafeidoDeleteProjectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KafeidoDeleteProjectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*KafeidoDeleteProjectDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
KafeidoDeleteProjectPipeline kafeido delete project pipeline API
*/
func (a *Client) KafeidoDeleteProjectPipeline(params *KafeidoDeleteProjectPipelineParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KafeidoDeleteProjectPipelineOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKafeidoDeleteProjectPipelineParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "kafeido_DeleteProjectPipeline",
		Method:             "DELETE",
		PathPattern:        "/v1/projects/{projectId}/pipelines/{namedPipelineId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &KafeidoDeleteProjectPipelineReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KafeidoDeleteProjectPipelineOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*KafeidoDeleteProjectPipelineDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
KafeidoGetDataSource kafeido get data source API
*/
func (a *Client) KafeidoGetDataSource(params *KafeidoGetDataSourceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KafeidoGetDataSourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKafeidoGetDataSourceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "kafeido_GetDataSource",
		Method:             "GET",
		PathPattern:        "/v1/projects/{projectId}/datasource/{dataSourceId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &KafeidoGetDataSourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KafeidoGetDataSourceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*KafeidoGetDataSourceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
KafeidoGetModelInference kafeido get model inference API
*/
func (a *Client) KafeidoGetModelInference(params *KafeidoGetModelInferenceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KafeidoGetModelInferenceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKafeidoGetModelInferenceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "kafeido_GetModelInference",
		Method:             "GET",
		PathPattern:        "/v1/projects/{projectId}/inference/{modelInferenceId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &KafeidoGetModelInferenceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KafeidoGetModelInferenceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*KafeidoGetModelInferenceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
KafeidoGetModelInferenceJob kafeido get model inference job API
*/
func (a *Client) KafeidoGetModelInferenceJob(params *KafeidoGetModelInferenceJobParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KafeidoGetModelInferenceJobOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKafeidoGetModelInferenceJobParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "kafeido_GetModelInferenceJob",
		Method:             "GET",
		PathPattern:        "/v1/projects/{projectId}/job/{modelInferenceJobId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &KafeidoGetModelInferenceJobReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KafeidoGetModelInferenceJobOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*KafeidoGetModelInferenceJobDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
KafeidoGetProject kafeido get project API
*/
func (a *Client) KafeidoGetProject(params *KafeidoGetProjectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KafeidoGetProjectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKafeidoGetProjectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "kafeido_GetProject",
		Method:             "GET",
		PathPattern:        "/v1/projects/{projectId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &KafeidoGetProjectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KafeidoGetProjectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*KafeidoGetProjectDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
KafeidoGetProjectPipeline kafeido get project pipeline API
*/
func (a *Client) KafeidoGetProjectPipeline(params *KafeidoGetProjectPipelineParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KafeidoGetProjectPipelineOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKafeidoGetProjectPipelineParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "kafeido_GetProjectPipeline",
		Method:             "GET",
		PathPattern:        "/v1/projects/{projectId}/pipelines/{namedPipelineId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &KafeidoGetProjectPipelineReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KafeidoGetProjectPipelineOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*KafeidoGetProjectPipelineDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
KafeidoGetUser kafeido get user API
*/
func (a *Client) KafeidoGetUser(params *KafeidoGetUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KafeidoGetUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKafeidoGetUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "kafeido_GetUser",
		Method:             "GET",
		PathPattern:        "/v1/user/{userId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &KafeidoGetUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KafeidoGetUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*KafeidoGetUserDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
KafeidoListDataSource kafeido list data source API
*/
func (a *Client) KafeidoListDataSource(params *KafeidoListDataSourceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KafeidoListDataSourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKafeidoListDataSourceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "kafeido_ListDataSource",
		Method:             "GET",
		PathPattern:        "/v1/projects/{projectId}/datasource",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &KafeidoListDataSourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KafeidoListDataSourceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*KafeidoListDataSourceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
KafeidoListModelInference kafeido list model inference API
*/
func (a *Client) KafeidoListModelInference(params *KafeidoListModelInferenceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KafeidoListModelInferenceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKafeidoListModelInferenceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "kafeido_ListModelInference",
		Method:             "GET",
		PathPattern:        "/v1/projects/{projectId}/inference",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &KafeidoListModelInferenceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KafeidoListModelInferenceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*KafeidoListModelInferenceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
KafeidoListModelInferenceJob kafeido list model inference job API
*/
func (a *Client) KafeidoListModelInferenceJob(params *KafeidoListModelInferenceJobParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KafeidoListModelInferenceJobOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKafeidoListModelInferenceJobParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "kafeido_ListModelInferenceJob",
		Method:             "GET",
		PathPattern:        "/v1/projects/{projectId}/job",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &KafeidoListModelInferenceJobReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KafeidoListModelInferenceJobOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*KafeidoListModelInferenceJobDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
KafeidoListProjectPipeline kafeido list project pipeline API
*/
func (a *Client) KafeidoListProjectPipeline(params *KafeidoListProjectPipelineParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KafeidoListProjectPipelineOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKafeidoListProjectPipelineParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "kafeido_ListProjectPipeline",
		Method:             "GET",
		PathPattern:        "/v1/projects/{projectId}/pipelines",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &KafeidoListProjectPipelineReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KafeidoListProjectPipelineOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*KafeidoListProjectPipelineDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
KafeidoListProjects kafeido list projects API
*/
func (a *Client) KafeidoListProjects(params *KafeidoListProjectsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KafeidoListProjectsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKafeidoListProjectsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "kafeido_ListProjects",
		Method:             "GET",
		PathPattern:        "/v1/projects",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &KafeidoListProjectsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KafeidoListProjectsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*KafeidoListProjectsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
KafeidoPutProject kafeido put project API
*/
func (a *Client) KafeidoPutProject(params *KafeidoPutProjectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KafeidoPutProjectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKafeidoPutProjectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "kafeido_PutProject",
		Method:             "PUT",
		PathPattern:        "/v1/projects/{projectId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &KafeidoPutProjectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KafeidoPutProjectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*KafeidoPutProjectDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
KafeidoPutProjectPipeline kafeido put project pipeline API
*/
func (a *Client) KafeidoPutProjectPipeline(params *KafeidoPutProjectPipelineParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KafeidoPutProjectPipelineOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKafeidoPutProjectPipelineParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "kafeido_PutProjectPipeline",
		Method:             "PUT",
		PathPattern:        "/v1/projects/{projectId}/pipelines/{namedPipelineId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &KafeidoPutProjectPipelineReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KafeidoPutProjectPipelineOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*KafeidoPutProjectPipelineDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
KafeidoRunProjectPipeline kafeido run project pipeline API
*/
func (a *Client) KafeidoRunProjectPipeline(params *KafeidoRunProjectPipelineParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KafeidoRunProjectPipelineOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKafeidoRunProjectPipelineParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "kafeido_RunProjectPipeline",
		Method:             "POST",
		PathPattern:        "/v1/projects/{projectId}/pipelines/{namedPipelineId}/run",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &KafeidoRunProjectPipelineReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KafeidoRunProjectPipelineOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*KafeidoRunProjectPipelineDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
