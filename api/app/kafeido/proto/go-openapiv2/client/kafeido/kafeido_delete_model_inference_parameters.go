// Code generated by go-swagger; DO NOT EDIT.

package kafeido

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewKafeidoDeleteModelInferenceParams creates a new KafeidoDeleteModelInferenceParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewKafeidoDeleteModelInferenceParams() *KafeidoDeleteModelInferenceParams {
	return &KafeidoDeleteModelInferenceParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewKafeidoDeleteModelInferenceParamsWithTimeout creates a new KafeidoDeleteModelInferenceParams object
// with the ability to set a timeout on a request.
func NewKafeidoDeleteModelInferenceParamsWithTimeout(timeout time.Duration) *KafeidoDeleteModelInferenceParams {
	return &KafeidoDeleteModelInferenceParams{
		timeout: timeout,
	}
}

// NewKafeidoDeleteModelInferenceParamsWithContext creates a new KafeidoDeleteModelInferenceParams object
// with the ability to set a context for a request.
func NewKafeidoDeleteModelInferenceParamsWithContext(ctx context.Context) *KafeidoDeleteModelInferenceParams {
	return &KafeidoDeleteModelInferenceParams{
		Context: ctx,
	}
}

// NewKafeidoDeleteModelInferenceParamsWithHTTPClient creates a new KafeidoDeleteModelInferenceParams object
// with the ability to set a custom HTTPClient for a request.
func NewKafeidoDeleteModelInferenceParamsWithHTTPClient(client *http.Client) *KafeidoDeleteModelInferenceParams {
	return &KafeidoDeleteModelInferenceParams{
		HTTPClient: client,
	}
}

/*
KafeidoDeleteModelInferenceParams contains all the parameters to send to the API endpoint

	for the kafeido delete model inference operation.

	Typically these are written to a http.Request.
*/
type KafeidoDeleteModelInferenceParams struct {

	// ModelInferenceID.
	ModelInferenceID string

	// NamedPipelineNameForDelete.
	NamedPipelineNameForDelete *string

	// ProjectID.
	ProjectID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the kafeido delete model inference params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *KafeidoDeleteModelInferenceParams) WithDefaults() *KafeidoDeleteModelInferenceParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the kafeido delete model inference params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *KafeidoDeleteModelInferenceParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the kafeido delete model inference params
func (o *KafeidoDeleteModelInferenceParams) WithTimeout(timeout time.Duration) *KafeidoDeleteModelInferenceParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the kafeido delete model inference params
func (o *KafeidoDeleteModelInferenceParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the kafeido delete model inference params
func (o *KafeidoDeleteModelInferenceParams) WithContext(ctx context.Context) *KafeidoDeleteModelInferenceParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the kafeido delete model inference params
func (o *KafeidoDeleteModelInferenceParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the kafeido delete model inference params
func (o *KafeidoDeleteModelInferenceParams) WithHTTPClient(client *http.Client) *KafeidoDeleteModelInferenceParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the kafeido delete model inference params
func (o *KafeidoDeleteModelInferenceParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithModelInferenceID adds the modelInferenceID to the kafeido delete model inference params
func (o *KafeidoDeleteModelInferenceParams) WithModelInferenceID(modelInferenceID string) *KafeidoDeleteModelInferenceParams {
	o.SetModelInferenceID(modelInferenceID)
	return o
}

// SetModelInferenceID adds the modelInferenceId to the kafeido delete model inference params
func (o *KafeidoDeleteModelInferenceParams) SetModelInferenceID(modelInferenceID string) {
	o.ModelInferenceID = modelInferenceID
}

// WithNamedPipelineNameForDelete adds the namedPipelineNameForDelete to the kafeido delete model inference params
func (o *KafeidoDeleteModelInferenceParams) WithNamedPipelineNameForDelete(namedPipelineNameForDelete *string) *KafeidoDeleteModelInferenceParams {
	o.SetNamedPipelineNameForDelete(namedPipelineNameForDelete)
	return o
}

// SetNamedPipelineNameForDelete adds the namedPipelineNameForDelete to the kafeido delete model inference params
func (o *KafeidoDeleteModelInferenceParams) SetNamedPipelineNameForDelete(namedPipelineNameForDelete *string) {
	o.NamedPipelineNameForDelete = namedPipelineNameForDelete
}

// WithProjectID adds the projectID to the kafeido delete model inference params
func (o *KafeidoDeleteModelInferenceParams) WithProjectID(projectID string) *KafeidoDeleteModelInferenceParams {
	o.SetProjectID(projectID)
	return o
}

// SetProjectID adds the projectId to the kafeido delete model inference params
func (o *KafeidoDeleteModelInferenceParams) SetProjectID(projectID string) {
	o.ProjectID = projectID
}

// WriteToRequest writes these params to a swagger request
func (o *KafeidoDeleteModelInferenceParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param modelInferenceId
	if err := r.SetPathParam("modelInferenceId", o.ModelInferenceID); err != nil {
		return err
	}

	if o.NamedPipelineNameForDelete != nil {

		// query param namedPipelineNameForDelete
		var qrNamedPipelineNameForDelete string

		if o.NamedPipelineNameForDelete != nil {
			qrNamedPipelineNameForDelete = *o.NamedPipelineNameForDelete
		}
		qNamedPipelineNameForDelete := qrNamedPipelineNameForDelete
		if qNamedPipelineNameForDelete != "" {

			if err := r.SetQueryParam("namedPipelineNameForDelete", qNamedPipelineNameForDelete); err != nil {
				return err
			}
		}
	}

	// path param projectId
	if err := r.SetPathParam("projectId", o.ProjectID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
