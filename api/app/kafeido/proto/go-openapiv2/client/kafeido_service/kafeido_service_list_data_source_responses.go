// Code generated by go-swagger; DO NOT EDIT.

package kafeido_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/footprintai/grandturks-client/v2/api/app/kafeido/proto/go-openapiv2/models"
)

// KafeidoServiceListDataSourceReader is a Reader for the KafeidoServiceListDataSource structure.
type KafeidoServiceListDataSourceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *KafeidoServiceListDataSourceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewKafeidoServiceListDataSourceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewKafeidoServiceListDataSourceDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewKafeidoServiceListDataSourceOK creates a KafeidoServiceListDataSourceOK with default headers values
func NewKafeidoServiceListDataSourceOK() *KafeidoServiceListDataSourceOK {
	return &KafeidoServiceListDataSourceOK{}
}

/*
KafeidoServiceListDataSourceOK describes a response with status code 200, with default header values.

A successful response.
*/
type KafeidoServiceListDataSourceOK struct {
	Payload *models.AppkafeidoListDataSourceResponse
}

// IsSuccess returns true when this kafeido service list data source o k response has a 2xx status code
func (o *KafeidoServiceListDataSourceOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this kafeido service list data source o k response has a 3xx status code
func (o *KafeidoServiceListDataSourceOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this kafeido service list data source o k response has a 4xx status code
func (o *KafeidoServiceListDataSourceOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this kafeido service list data source o k response has a 5xx status code
func (o *KafeidoServiceListDataSourceOK) IsServerError() bool {
	return false
}

// IsCode returns true when this kafeido service list data source o k response a status code equal to that given
func (o *KafeidoServiceListDataSourceOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the kafeido service list data source o k response
func (o *KafeidoServiceListDataSourceOK) Code() int {
	return 200
}

func (o *KafeidoServiceListDataSourceOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/projects/{projectId}/datasource][%d] kafeidoServiceListDataSourceOK %s", 200, payload)
}

func (o *KafeidoServiceListDataSourceOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/projects/{projectId}/datasource][%d] kafeidoServiceListDataSourceOK %s", 200, payload)
}

func (o *KafeidoServiceListDataSourceOK) GetPayload() *models.AppkafeidoListDataSourceResponse {
	return o.Payload
}

func (o *KafeidoServiceListDataSourceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AppkafeidoListDataSourceResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewKafeidoServiceListDataSourceDefault creates a KafeidoServiceListDataSourceDefault with default headers values
func NewKafeidoServiceListDataSourceDefault(code int) *KafeidoServiceListDataSourceDefault {
	return &KafeidoServiceListDataSourceDefault{
		_statusCode: code,
	}
}

/*
KafeidoServiceListDataSourceDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type KafeidoServiceListDataSourceDefault struct {
	_statusCode int

	Payload *models.RPCStatus
}

// IsSuccess returns true when this kafeido service list data source default response has a 2xx status code
func (o *KafeidoServiceListDataSourceDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this kafeido service list data source default response has a 3xx status code
func (o *KafeidoServiceListDataSourceDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this kafeido service list data source default response has a 4xx status code
func (o *KafeidoServiceListDataSourceDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this kafeido service list data source default response has a 5xx status code
func (o *KafeidoServiceListDataSourceDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this kafeido service list data source default response a status code equal to that given
func (o *KafeidoServiceListDataSourceDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the kafeido service list data source default response
func (o *KafeidoServiceListDataSourceDefault) Code() int {
	return o._statusCode
}

func (o *KafeidoServiceListDataSourceDefault) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/projects/{projectId}/datasource][%d] KafeidoService_ListDataSource default %s", o._statusCode, payload)
}

func (o *KafeidoServiceListDataSourceDefault) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /v1/projects/{projectId}/datasource][%d] KafeidoService_ListDataSource default %s", o._statusCode, payload)
}

func (o *KafeidoServiceListDataSourceDefault) GetPayload() *models.RPCStatus {
	return o.Payload
}

func (o *KafeidoServiceListDataSourceDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RPCStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
