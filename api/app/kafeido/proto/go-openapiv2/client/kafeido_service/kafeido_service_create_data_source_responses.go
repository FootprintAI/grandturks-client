// Code generated by go-swagger; DO NOT EDIT.

package kafeido_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/footprintai/grandturks-client/v2/api/app/kafeido/proto/go-openapiv2/models"
)

// KafeidoServiceCreateDataSourceReader is a Reader for the KafeidoServiceCreateDataSource structure.
type KafeidoServiceCreateDataSourceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *KafeidoServiceCreateDataSourceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewKafeidoServiceCreateDataSourceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewKafeidoServiceCreateDataSourceDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewKafeidoServiceCreateDataSourceOK creates a KafeidoServiceCreateDataSourceOK with default headers values
func NewKafeidoServiceCreateDataSourceOK() *KafeidoServiceCreateDataSourceOK {
	return &KafeidoServiceCreateDataSourceOK{}
}

/*
KafeidoServiceCreateDataSourceOK describes a response with status code 200, with default header values.

A successful response.
*/
type KafeidoServiceCreateDataSourceOK struct {
	Payload *models.AppkafeidoCreateDataSourceResponse
}

// IsSuccess returns true when this kafeido service create data source o k response has a 2xx status code
func (o *KafeidoServiceCreateDataSourceOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this kafeido service create data source o k response has a 3xx status code
func (o *KafeidoServiceCreateDataSourceOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this kafeido service create data source o k response has a 4xx status code
func (o *KafeidoServiceCreateDataSourceOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this kafeido service create data source o k response has a 5xx status code
func (o *KafeidoServiceCreateDataSourceOK) IsServerError() bool {
	return false
}

// IsCode returns true when this kafeido service create data source o k response a status code equal to that given
func (o *KafeidoServiceCreateDataSourceOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the kafeido service create data source o k response
func (o *KafeidoServiceCreateDataSourceOK) Code() int {
	return 200
}

func (o *KafeidoServiceCreateDataSourceOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/projects/{projectId}/datasource][%d] kafeidoServiceCreateDataSourceOK %s", 200, payload)
}

func (o *KafeidoServiceCreateDataSourceOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/projects/{projectId}/datasource][%d] kafeidoServiceCreateDataSourceOK %s", 200, payload)
}

func (o *KafeidoServiceCreateDataSourceOK) GetPayload() *models.AppkafeidoCreateDataSourceResponse {
	return o.Payload
}

func (o *KafeidoServiceCreateDataSourceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AppkafeidoCreateDataSourceResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewKafeidoServiceCreateDataSourceDefault creates a KafeidoServiceCreateDataSourceDefault with default headers values
func NewKafeidoServiceCreateDataSourceDefault(code int) *KafeidoServiceCreateDataSourceDefault {
	return &KafeidoServiceCreateDataSourceDefault{
		_statusCode: code,
	}
}

/*
KafeidoServiceCreateDataSourceDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type KafeidoServiceCreateDataSourceDefault struct {
	_statusCode int

	Payload *models.RPCStatus
}

// IsSuccess returns true when this kafeido service create data source default response has a 2xx status code
func (o *KafeidoServiceCreateDataSourceDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this kafeido service create data source default response has a 3xx status code
func (o *KafeidoServiceCreateDataSourceDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this kafeido service create data source default response has a 4xx status code
func (o *KafeidoServiceCreateDataSourceDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this kafeido service create data source default response has a 5xx status code
func (o *KafeidoServiceCreateDataSourceDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this kafeido service create data source default response a status code equal to that given
func (o *KafeidoServiceCreateDataSourceDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the kafeido service create data source default response
func (o *KafeidoServiceCreateDataSourceDefault) Code() int {
	return o._statusCode
}

func (o *KafeidoServiceCreateDataSourceDefault) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/projects/{projectId}/datasource][%d] KafeidoService_CreateDataSource default %s", o._statusCode, payload)
}

func (o *KafeidoServiceCreateDataSourceDefault) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/projects/{projectId}/datasource][%d] KafeidoService_CreateDataSource default %s", o._statusCode, payload)
}

func (o *KafeidoServiceCreateDataSourceDefault) GetPayload() *models.RPCStatus {
	return o.Payload
}

func (o *KafeidoServiceCreateDataSourceDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RPCStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
KafeidoServiceCreateDataSourceBody kafeido service create data source body
swagger:model KafeidoServiceCreateDataSourceBody
*/
type KafeidoServiceCreateDataSourceBody struct {

	// data source info
	DataSourceInfo *models.KafeidoDataSourceInfo `json:"dataSourceInfo,omitempty"`
}

// Validate validates this kafeido service create data source body
func (o *KafeidoServiceCreateDataSourceBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDataSourceInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *KafeidoServiceCreateDataSourceBody) validateDataSourceInfo(formats strfmt.Registry) error {
	if swag.IsZero(o.DataSourceInfo) { // not required
		return nil
	}

	if o.DataSourceInfo != nil {
		if err := o.DataSourceInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "dataSourceInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "dataSourceInfo")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this kafeido service create data source body based on the context it is used
func (o *KafeidoServiceCreateDataSourceBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDataSourceInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *KafeidoServiceCreateDataSourceBody) contextValidateDataSourceInfo(ctx context.Context, formats strfmt.Registry) error {

	if o.DataSourceInfo != nil {

		if swag.IsZero(o.DataSourceInfo) { // not required
			return nil
		}

		if err := o.DataSourceInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "dataSourceInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "dataSourceInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *KafeidoServiceCreateDataSourceBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *KafeidoServiceCreateDataSourceBody) UnmarshalBinary(b []byte) error {
	var res KafeidoServiceCreateDataSourceBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
