// Code generated by go-swagger; DO NOT EDIT.

package kafeido_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new kafeido service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new kafeido service API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new kafeido service API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for kafeido service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	KafeidoServiceAppLogin(params *KafeidoServiceAppLoginParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KafeidoServiceAppLoginOK, error)

	KafeidoServiceCancelModelInferenceJob(params *KafeidoServiceCancelModelInferenceJobParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KafeidoServiceCancelModelInferenceJobOK, error)

	KafeidoServiceCreateDataSource(params *KafeidoServiceCreateDataSourceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KafeidoServiceCreateDataSourceOK, error)

	KafeidoServiceCreateModelInference(params *KafeidoServiceCreateModelInferenceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KafeidoServiceCreateModelInferenceOK, error)

	KafeidoServiceCreateModelInferenceJob(params *KafeidoServiceCreateModelInferenceJobParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KafeidoServiceCreateModelInferenceJobOK, error)

	KafeidoServiceCreatePrediction(params *KafeidoServiceCreatePredictionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KafeidoServiceCreatePredictionOK, error)

	KafeidoServiceCreateProject(params *KafeidoServiceCreateProjectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KafeidoServiceCreateProjectOK, error)

	KafeidoServiceCreateProjectPipeline(params *KafeidoServiceCreateProjectPipelineParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KafeidoServiceCreateProjectPipelineOK, error)

	KafeidoServiceCreateUser(params *KafeidoServiceCreateUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KafeidoServiceCreateUserOK, error)

	KafeidoServiceDeleteDataSource(params *KafeidoServiceDeleteDataSourceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KafeidoServiceDeleteDataSourceOK, error)

	KafeidoServiceDeleteModelInference(params *KafeidoServiceDeleteModelInferenceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KafeidoServiceDeleteModelInferenceOK, error)

	KafeidoServiceDeleteModelInferenceJob(params *KafeidoServiceDeleteModelInferenceJobParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KafeidoServiceDeleteModelInferenceJobOK, error)

	KafeidoServiceDeleteProject(params *KafeidoServiceDeleteProjectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KafeidoServiceDeleteProjectOK, error)

	KafeidoServiceDeleteProjectPipeline(params *KafeidoServiceDeleteProjectPipelineParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KafeidoServiceDeleteProjectPipelineOK, error)

	KafeidoServiceGetDataSource(params *KafeidoServiceGetDataSourceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KafeidoServiceGetDataSourceOK, error)

	KafeidoServiceGetModelInference(params *KafeidoServiceGetModelInferenceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KafeidoServiceGetModelInferenceOK, error)

	KafeidoServiceGetModelInferenceJob(params *KafeidoServiceGetModelInferenceJobParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KafeidoServiceGetModelInferenceJobOK, error)

	KafeidoServiceGetProject(params *KafeidoServiceGetProjectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KafeidoServiceGetProjectOK, error)

	KafeidoServiceGetProjectPipeline(params *KafeidoServiceGetProjectPipelineParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KafeidoServiceGetProjectPipelineOK, error)

	KafeidoServiceGetUser(params *KafeidoServiceGetUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KafeidoServiceGetUserOK, error)

	KafeidoServiceListDataSource(params *KafeidoServiceListDataSourceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KafeidoServiceListDataSourceOK, error)

	KafeidoServiceListModelInference(params *KafeidoServiceListModelInferenceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KafeidoServiceListModelInferenceOK, error)

	KafeidoServiceListModelInferenceJob(params *KafeidoServiceListModelInferenceJobParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KafeidoServiceListModelInferenceJobOK, error)

	KafeidoServiceListProjectPipeline(params *KafeidoServiceListProjectPipelineParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KafeidoServiceListProjectPipelineOK, error)

	KafeidoServiceListProjects(params *KafeidoServiceListProjectsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KafeidoServiceListProjectsOK, error)

	KafeidoServicePutProject(params *KafeidoServicePutProjectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KafeidoServicePutProjectOK, error)

	KafeidoServicePutProjectPipeline(params *KafeidoServicePutProjectPipelineParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KafeidoServicePutProjectPipelineOK, error)

	KafeidoServiceRunProjectPipeline(params *KafeidoServiceRunProjectPipelineParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KafeidoServiceRunProjectPipelineOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
KafeidoServiceAppLogin kafeido service app login API
*/
func (a *Client) KafeidoServiceAppLogin(params *KafeidoServiceAppLoginParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KafeidoServiceAppLoginOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKafeidoServiceAppLoginParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "KafeidoService_AppLogin",
		Method:             "POST",
		PathPattern:        "/v1/login",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &KafeidoServiceAppLoginReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KafeidoServiceAppLoginOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*KafeidoServiceAppLoginDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
KafeidoServiceCancelModelInferenceJob kafeido service cancel model inference job API
*/
func (a *Client) KafeidoServiceCancelModelInferenceJob(params *KafeidoServiceCancelModelInferenceJobParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KafeidoServiceCancelModelInferenceJobOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKafeidoServiceCancelModelInferenceJobParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "KafeidoService_CancelModelInferenceJob",
		Method:             "POST",
		PathPattern:        "/v1/projects/{projectId}/job/{modelInferenceJobId}:cancel",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &KafeidoServiceCancelModelInferenceJobReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KafeidoServiceCancelModelInferenceJobOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*KafeidoServiceCancelModelInferenceJobDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
KafeidoServiceCreateDataSource kafeido service create data source API
*/
func (a *Client) KafeidoServiceCreateDataSource(params *KafeidoServiceCreateDataSourceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KafeidoServiceCreateDataSourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKafeidoServiceCreateDataSourceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "KafeidoService_CreateDataSource",
		Method:             "POST",
		PathPattern:        "/v1/projects/{projectId}/datasource",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &KafeidoServiceCreateDataSourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KafeidoServiceCreateDataSourceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*KafeidoServiceCreateDataSourceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
KafeidoServiceCreateModelInference kafeido service create model inference API
*/
func (a *Client) KafeidoServiceCreateModelInference(params *KafeidoServiceCreateModelInferenceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KafeidoServiceCreateModelInferenceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKafeidoServiceCreateModelInferenceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "KafeidoService_CreateModelInference",
		Method:             "POST",
		PathPattern:        "/v1/projects/{projectId}/inference",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &KafeidoServiceCreateModelInferenceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KafeidoServiceCreateModelInferenceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*KafeidoServiceCreateModelInferenceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
KafeidoServiceCreateModelInferenceJob kafeido service create model inference job API
*/
func (a *Client) KafeidoServiceCreateModelInferenceJob(params *KafeidoServiceCreateModelInferenceJobParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KafeidoServiceCreateModelInferenceJobOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKafeidoServiceCreateModelInferenceJobParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "KafeidoService_CreateModelInferenceJob",
		Method:             "POST",
		PathPattern:        "/v1/projects/{projectId}/job",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &KafeidoServiceCreateModelInferenceJobReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KafeidoServiceCreateModelInferenceJobOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*KafeidoServiceCreateModelInferenceJobDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
KafeidoServiceCreatePrediction kafeido service create prediction API
*/
func (a *Client) KafeidoServiceCreatePrediction(params *KafeidoServiceCreatePredictionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KafeidoServiceCreatePredictionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKafeidoServiceCreatePredictionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "KafeidoService_CreatePrediction",
		Method:             "POST",
		PathPattern:        "/v1/projects/{projectId}/inference/{modelInferenceId}:predict",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &KafeidoServiceCreatePredictionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KafeidoServiceCreatePredictionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*KafeidoServiceCreatePredictionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
KafeidoServiceCreateProject kafeido service create project API
*/
func (a *Client) KafeidoServiceCreateProject(params *KafeidoServiceCreateProjectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KafeidoServiceCreateProjectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKafeidoServiceCreateProjectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "KafeidoService_CreateProject",
		Method:             "POST",
		PathPattern:        "/v1/projects",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &KafeidoServiceCreateProjectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KafeidoServiceCreateProjectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*KafeidoServiceCreateProjectDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
KafeidoServiceCreateProjectPipeline kafeido service create project pipeline API
*/
func (a *Client) KafeidoServiceCreateProjectPipeline(params *KafeidoServiceCreateProjectPipelineParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KafeidoServiceCreateProjectPipelineOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKafeidoServiceCreateProjectPipelineParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "KafeidoService_CreateProjectPipeline",
		Method:             "POST",
		PathPattern:        "/v1/projects/{projectId}/pipelines",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &KafeidoServiceCreateProjectPipelineReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KafeidoServiceCreateProjectPipelineOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*KafeidoServiceCreateProjectPipelineDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
KafeidoServiceCreateUser kafeido service create user API
*/
func (a *Client) KafeidoServiceCreateUser(params *KafeidoServiceCreateUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KafeidoServiceCreateUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKafeidoServiceCreateUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "KafeidoService_CreateUser",
		Method:             "POST",
		PathPattern:        "/v1/user",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &KafeidoServiceCreateUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KafeidoServiceCreateUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*KafeidoServiceCreateUserDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
KafeidoServiceDeleteDataSource kafeido service delete data source API
*/
func (a *Client) KafeidoServiceDeleteDataSource(params *KafeidoServiceDeleteDataSourceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KafeidoServiceDeleteDataSourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKafeidoServiceDeleteDataSourceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "KafeidoService_DeleteDataSource",
		Method:             "DELETE",
		PathPattern:        "/v1/projects/{projectId}/datasource/{dataSourceId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &KafeidoServiceDeleteDataSourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KafeidoServiceDeleteDataSourceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*KafeidoServiceDeleteDataSourceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
KafeidoServiceDeleteModelInference kafeido service delete model inference API
*/
func (a *Client) KafeidoServiceDeleteModelInference(params *KafeidoServiceDeleteModelInferenceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KafeidoServiceDeleteModelInferenceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKafeidoServiceDeleteModelInferenceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "KafeidoService_DeleteModelInference",
		Method:             "DELETE",
		PathPattern:        "/v1/projects/{projectId}/inference/{modelInferenceId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &KafeidoServiceDeleteModelInferenceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KafeidoServiceDeleteModelInferenceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*KafeidoServiceDeleteModelInferenceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
KafeidoServiceDeleteModelInferenceJob kafeido service delete model inference job API
*/
func (a *Client) KafeidoServiceDeleteModelInferenceJob(params *KafeidoServiceDeleteModelInferenceJobParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KafeidoServiceDeleteModelInferenceJobOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKafeidoServiceDeleteModelInferenceJobParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "KafeidoService_DeleteModelInferenceJob",
		Method:             "DELETE",
		PathPattern:        "/v1/projects/{projectId}/job/{modelInferenceJobId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &KafeidoServiceDeleteModelInferenceJobReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KafeidoServiceDeleteModelInferenceJobOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*KafeidoServiceDeleteModelInferenceJobDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
KafeidoServiceDeleteProject rpcs get project model get project model request returns get project model response option google api http get v1 projects project id model get
*/
func (a *Client) KafeidoServiceDeleteProject(params *KafeidoServiceDeleteProjectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KafeidoServiceDeleteProjectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKafeidoServiceDeleteProjectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "KafeidoService_DeleteProject",
		Method:             "DELETE",
		PathPattern:        "/v1/projects/{projectId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &KafeidoServiceDeleteProjectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KafeidoServiceDeleteProjectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*KafeidoServiceDeleteProjectDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
KafeidoServiceDeleteProjectPipeline kafeido service delete project pipeline API
*/
func (a *Client) KafeidoServiceDeleteProjectPipeline(params *KafeidoServiceDeleteProjectPipelineParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KafeidoServiceDeleteProjectPipelineOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKafeidoServiceDeleteProjectPipelineParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "KafeidoService_DeleteProjectPipeline",
		Method:             "DELETE",
		PathPattern:        "/v1/projects/{projectId}/pipelines/{namedPipelineId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &KafeidoServiceDeleteProjectPipelineReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KafeidoServiceDeleteProjectPipelineOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*KafeidoServiceDeleteProjectPipelineDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
KafeidoServiceGetDataSource kafeido service get data source API
*/
func (a *Client) KafeidoServiceGetDataSource(params *KafeidoServiceGetDataSourceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KafeidoServiceGetDataSourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKafeidoServiceGetDataSourceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "KafeidoService_GetDataSource",
		Method:             "GET",
		PathPattern:        "/v1/projects/{projectId}/datasource/{dataSourceId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &KafeidoServiceGetDataSourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KafeidoServiceGetDataSourceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*KafeidoServiceGetDataSourceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
KafeidoServiceGetModelInference kafeido service get model inference API
*/
func (a *Client) KafeidoServiceGetModelInference(params *KafeidoServiceGetModelInferenceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KafeidoServiceGetModelInferenceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKafeidoServiceGetModelInferenceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "KafeidoService_GetModelInference",
		Method:             "GET",
		PathPattern:        "/v1/projects/{projectId}/inference/{modelInferenceId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &KafeidoServiceGetModelInferenceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KafeidoServiceGetModelInferenceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*KafeidoServiceGetModelInferenceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
KafeidoServiceGetModelInferenceJob kafeido service get model inference job API
*/
func (a *Client) KafeidoServiceGetModelInferenceJob(params *KafeidoServiceGetModelInferenceJobParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KafeidoServiceGetModelInferenceJobOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKafeidoServiceGetModelInferenceJobParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "KafeidoService_GetModelInferenceJob",
		Method:             "GET",
		PathPattern:        "/v1/projects/{projectId}/job/{modelInferenceJobId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &KafeidoServiceGetModelInferenceJobReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KafeidoServiceGetModelInferenceJobOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*KafeidoServiceGetModelInferenceJobDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
KafeidoServiceGetProject kafeido service get project API
*/
func (a *Client) KafeidoServiceGetProject(params *KafeidoServiceGetProjectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KafeidoServiceGetProjectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKafeidoServiceGetProjectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "KafeidoService_GetProject",
		Method:             "GET",
		PathPattern:        "/v1/projects/{projectId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &KafeidoServiceGetProjectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KafeidoServiceGetProjectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*KafeidoServiceGetProjectDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
KafeidoServiceGetProjectPipeline kafeido service get project pipeline API
*/
func (a *Client) KafeidoServiceGetProjectPipeline(params *KafeidoServiceGetProjectPipelineParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KafeidoServiceGetProjectPipelineOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKafeidoServiceGetProjectPipelineParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "KafeidoService_GetProjectPipeline",
		Method:             "GET",
		PathPattern:        "/v1/projects/{projectId}/pipelines/{namedPipelineId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &KafeidoServiceGetProjectPipelineReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KafeidoServiceGetProjectPipelineOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*KafeidoServiceGetProjectPipelineDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
KafeidoServiceGetUser kafeido service get user API
*/
func (a *Client) KafeidoServiceGetUser(params *KafeidoServiceGetUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KafeidoServiceGetUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKafeidoServiceGetUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "KafeidoService_GetUser",
		Method:             "GET",
		PathPattern:        "/v1/user/{userId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &KafeidoServiceGetUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KafeidoServiceGetUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*KafeidoServiceGetUserDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
KafeidoServiceListDataSource kafeido service list data source API
*/
func (a *Client) KafeidoServiceListDataSource(params *KafeidoServiceListDataSourceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KafeidoServiceListDataSourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKafeidoServiceListDataSourceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "KafeidoService_ListDataSource",
		Method:             "GET",
		PathPattern:        "/v1/projects/{projectId}/datasource",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &KafeidoServiceListDataSourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KafeidoServiceListDataSourceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*KafeidoServiceListDataSourceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
KafeidoServiceListModelInference kafeido service list model inference API
*/
func (a *Client) KafeidoServiceListModelInference(params *KafeidoServiceListModelInferenceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KafeidoServiceListModelInferenceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKafeidoServiceListModelInferenceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "KafeidoService_ListModelInference",
		Method:             "GET",
		PathPattern:        "/v1/projects/{projectId}/inference",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &KafeidoServiceListModelInferenceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KafeidoServiceListModelInferenceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*KafeidoServiceListModelInferenceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
KafeidoServiceListModelInferenceJob kafeido service list model inference job API
*/
func (a *Client) KafeidoServiceListModelInferenceJob(params *KafeidoServiceListModelInferenceJobParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KafeidoServiceListModelInferenceJobOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKafeidoServiceListModelInferenceJobParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "KafeidoService_ListModelInferenceJob",
		Method:             "GET",
		PathPattern:        "/v1/projects/{projectId}/job",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &KafeidoServiceListModelInferenceJobReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KafeidoServiceListModelInferenceJobOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*KafeidoServiceListModelInferenceJobDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
KafeidoServiceListProjectPipeline kafeido service list project pipeline API
*/
func (a *Client) KafeidoServiceListProjectPipeline(params *KafeidoServiceListProjectPipelineParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KafeidoServiceListProjectPipelineOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKafeidoServiceListProjectPipelineParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "KafeidoService_ListProjectPipeline",
		Method:             "GET",
		PathPattern:        "/v1/projects/{projectId}/pipelines",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &KafeidoServiceListProjectPipelineReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KafeidoServiceListProjectPipelineOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*KafeidoServiceListProjectPipelineDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
KafeidoServiceListProjects kafeido service list projects API
*/
func (a *Client) KafeidoServiceListProjects(params *KafeidoServiceListProjectsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KafeidoServiceListProjectsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKafeidoServiceListProjectsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "KafeidoService_ListProjects",
		Method:             "GET",
		PathPattern:        "/v1/projects",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &KafeidoServiceListProjectsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KafeidoServiceListProjectsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*KafeidoServiceListProjectsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
KafeidoServicePutProject kafeido service put project API
*/
func (a *Client) KafeidoServicePutProject(params *KafeidoServicePutProjectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KafeidoServicePutProjectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKafeidoServicePutProjectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "KafeidoService_PutProject",
		Method:             "PUT",
		PathPattern:        "/v1/projects/{projectId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &KafeidoServicePutProjectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KafeidoServicePutProjectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*KafeidoServicePutProjectDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
KafeidoServicePutProjectPipeline kafeido service put project pipeline API
*/
func (a *Client) KafeidoServicePutProjectPipeline(params *KafeidoServicePutProjectPipelineParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KafeidoServicePutProjectPipelineOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKafeidoServicePutProjectPipelineParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "KafeidoService_PutProjectPipeline",
		Method:             "PUT",
		PathPattern:        "/v1/projects/{projectId}/pipelines/{namedPipelineId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &KafeidoServicePutProjectPipelineReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KafeidoServicePutProjectPipelineOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*KafeidoServicePutProjectPipelineDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
KafeidoServiceRunProjectPipeline kafeido service run project pipeline API
*/
func (a *Client) KafeidoServiceRunProjectPipeline(params *KafeidoServiceRunProjectPipelineParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KafeidoServiceRunProjectPipelineOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKafeidoServiceRunProjectPipelineParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "KafeidoService_RunProjectPipeline",
		Method:             "POST",
		PathPattern:        "/v1/projects/{projectId}/pipelines/{namedPipelineId}/run",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &KafeidoServiceRunProjectPipelineReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KafeidoServiceRunProjectPipelineOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*KafeidoServiceRunProjectPipelineDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
