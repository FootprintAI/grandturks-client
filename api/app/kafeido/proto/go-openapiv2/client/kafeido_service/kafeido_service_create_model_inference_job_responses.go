// Code generated by go-swagger; DO NOT EDIT.

package kafeido_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/footprintai/grandturks-client/v2/api/app/kafeido/proto/go-openapiv2/models"
)

// KafeidoServiceCreateModelInferenceJobReader is a Reader for the KafeidoServiceCreateModelInferenceJob structure.
type KafeidoServiceCreateModelInferenceJobReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *KafeidoServiceCreateModelInferenceJobReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewKafeidoServiceCreateModelInferenceJobOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewKafeidoServiceCreateModelInferenceJobDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewKafeidoServiceCreateModelInferenceJobOK creates a KafeidoServiceCreateModelInferenceJobOK with default headers values
func NewKafeidoServiceCreateModelInferenceJobOK() *KafeidoServiceCreateModelInferenceJobOK {
	return &KafeidoServiceCreateModelInferenceJobOK{}
}

/*
KafeidoServiceCreateModelInferenceJobOK describes a response with status code 200, with default header values.

A successful response.
*/
type KafeidoServiceCreateModelInferenceJobOK struct {
	Payload *models.KafeidoCreateModelInferenceJobResponse
}

// IsSuccess returns true when this kafeido service create model inference job o k response has a 2xx status code
func (o *KafeidoServiceCreateModelInferenceJobOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this kafeido service create model inference job o k response has a 3xx status code
func (o *KafeidoServiceCreateModelInferenceJobOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this kafeido service create model inference job o k response has a 4xx status code
func (o *KafeidoServiceCreateModelInferenceJobOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this kafeido service create model inference job o k response has a 5xx status code
func (o *KafeidoServiceCreateModelInferenceJobOK) IsServerError() bool {
	return false
}

// IsCode returns true when this kafeido service create model inference job o k response a status code equal to that given
func (o *KafeidoServiceCreateModelInferenceJobOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the kafeido service create model inference job o k response
func (o *KafeidoServiceCreateModelInferenceJobOK) Code() int {
	return 200
}

func (o *KafeidoServiceCreateModelInferenceJobOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/projects/{projectId}/job][%d] kafeidoServiceCreateModelInferenceJobOK %s", 200, payload)
}

func (o *KafeidoServiceCreateModelInferenceJobOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/projects/{projectId}/job][%d] kafeidoServiceCreateModelInferenceJobOK %s", 200, payload)
}

func (o *KafeidoServiceCreateModelInferenceJobOK) GetPayload() *models.KafeidoCreateModelInferenceJobResponse {
	return o.Payload
}

func (o *KafeidoServiceCreateModelInferenceJobOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.KafeidoCreateModelInferenceJobResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewKafeidoServiceCreateModelInferenceJobDefault creates a KafeidoServiceCreateModelInferenceJobDefault with default headers values
func NewKafeidoServiceCreateModelInferenceJobDefault(code int) *KafeidoServiceCreateModelInferenceJobDefault {
	return &KafeidoServiceCreateModelInferenceJobDefault{
		_statusCode: code,
	}
}

/*
KafeidoServiceCreateModelInferenceJobDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type KafeidoServiceCreateModelInferenceJobDefault struct {
	_statusCode int

	Payload *models.RPCStatus
}

// IsSuccess returns true when this kafeido service create model inference job default response has a 2xx status code
func (o *KafeidoServiceCreateModelInferenceJobDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this kafeido service create model inference job default response has a 3xx status code
func (o *KafeidoServiceCreateModelInferenceJobDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this kafeido service create model inference job default response has a 4xx status code
func (o *KafeidoServiceCreateModelInferenceJobDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this kafeido service create model inference job default response has a 5xx status code
func (o *KafeidoServiceCreateModelInferenceJobDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this kafeido service create model inference job default response a status code equal to that given
func (o *KafeidoServiceCreateModelInferenceJobDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the kafeido service create model inference job default response
func (o *KafeidoServiceCreateModelInferenceJobDefault) Code() int {
	return o._statusCode
}

func (o *KafeidoServiceCreateModelInferenceJobDefault) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/projects/{projectId}/job][%d] KafeidoService_CreateModelInferenceJob default %s", o._statusCode, payload)
}

func (o *KafeidoServiceCreateModelInferenceJobDefault) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/projects/{projectId}/job][%d] KafeidoService_CreateModelInferenceJob default %s", o._statusCode, payload)
}

func (o *KafeidoServiceCreateModelInferenceJobDefault) GetPayload() *models.RPCStatus {
	return o.Payload
}

func (o *KafeidoServiceCreateModelInferenceJobDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RPCStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
KafeidoServiceCreateModelInferenceJobBody kafeido service create model inference job body
swagger:model KafeidoServiceCreateModelInferenceJobBody
*/
type KafeidoServiceCreateModelInferenceJobBody struct {

	// audio output format
	AudioOutputFormat *models.DatastreamAudioOutputFormat `json:"audioOutputFormat,omitempty"`

	// concurrent requests
	ConcurrentRequests int32 `json:"concurrentRequests,omitempty"`

	// data sink config
	DataSinkConfig *models.KafeidoDataSinkConfig `json:"dataSinkConfig,omitempty"`

	// data source Id
	DataSourceID string `json:"dataSourceId,omitempty"`

	// image output format
	ImageOutputFormat *models.DatastreamImageOutputFormat `json:"imageOutputFormat,omitempty"`

	// job kind
	JobKind *models.TaskworkerInferenceJob `json:"jobKind,omitempty"`

	// model inference Id
	ModelInferenceID string `json:"modelInferenceId,omitempty"`

	// prometheus job label
	PrometheusJobLabel string `json:"prometheusJobLabel,omitempty"`
}

// Validate validates this kafeido service create model inference job body
func (o *KafeidoServiceCreateModelInferenceJobBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAudioOutputFormat(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDataSinkConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateImageOutputFormat(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateJobKind(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *KafeidoServiceCreateModelInferenceJobBody) validateAudioOutputFormat(formats strfmt.Registry) error {
	if swag.IsZero(o.AudioOutputFormat) { // not required
		return nil
	}

	if o.AudioOutputFormat != nil {
		if err := o.AudioOutputFormat.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "audioOutputFormat")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "audioOutputFormat")
			}
			return err
		}
	}

	return nil
}

func (o *KafeidoServiceCreateModelInferenceJobBody) validateDataSinkConfig(formats strfmt.Registry) error {
	if swag.IsZero(o.DataSinkConfig) { // not required
		return nil
	}

	if o.DataSinkConfig != nil {
		if err := o.DataSinkConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "dataSinkConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "dataSinkConfig")
			}
			return err
		}
	}

	return nil
}

func (o *KafeidoServiceCreateModelInferenceJobBody) validateImageOutputFormat(formats strfmt.Registry) error {
	if swag.IsZero(o.ImageOutputFormat) { // not required
		return nil
	}

	if o.ImageOutputFormat != nil {
		if err := o.ImageOutputFormat.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "imageOutputFormat")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "imageOutputFormat")
			}
			return err
		}
	}

	return nil
}

func (o *KafeidoServiceCreateModelInferenceJobBody) validateJobKind(formats strfmt.Registry) error {
	if swag.IsZero(o.JobKind) { // not required
		return nil
	}

	if o.JobKind != nil {
		if err := o.JobKind.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "jobKind")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "jobKind")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this kafeido service create model inference job body based on the context it is used
func (o *KafeidoServiceCreateModelInferenceJobBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAudioOutputFormat(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateDataSinkConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateImageOutputFormat(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateJobKind(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *KafeidoServiceCreateModelInferenceJobBody) contextValidateAudioOutputFormat(ctx context.Context, formats strfmt.Registry) error {

	if o.AudioOutputFormat != nil {

		if swag.IsZero(o.AudioOutputFormat) { // not required
			return nil
		}

		if err := o.AudioOutputFormat.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "audioOutputFormat")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "audioOutputFormat")
			}
			return err
		}
	}

	return nil
}

func (o *KafeidoServiceCreateModelInferenceJobBody) contextValidateDataSinkConfig(ctx context.Context, formats strfmt.Registry) error {

	if o.DataSinkConfig != nil {

		if swag.IsZero(o.DataSinkConfig) { // not required
			return nil
		}

		if err := o.DataSinkConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "dataSinkConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "dataSinkConfig")
			}
			return err
		}
	}

	return nil
}

func (o *KafeidoServiceCreateModelInferenceJobBody) contextValidateImageOutputFormat(ctx context.Context, formats strfmt.Registry) error {

	if o.ImageOutputFormat != nil {

		if swag.IsZero(o.ImageOutputFormat) { // not required
			return nil
		}

		if err := o.ImageOutputFormat.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "imageOutputFormat")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "imageOutputFormat")
			}
			return err
		}
	}

	return nil
}

func (o *KafeidoServiceCreateModelInferenceJobBody) contextValidateJobKind(ctx context.Context, formats strfmt.Registry) error {

	if o.JobKind != nil {

		if swag.IsZero(o.JobKind) { // not required
			return nil
		}

		if err := o.JobKind.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "jobKind")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "jobKind")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *KafeidoServiceCreateModelInferenceJobBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *KafeidoServiceCreateModelInferenceJobBody) UnmarshalBinary(b []byte) error {
	var res KafeidoServiceCreateModelInferenceJobBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
