// Code generated by go-swagger; DO NOT EDIT.

package kafeido_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/footprintai/grandturks-client/v2/api/app/kafeido/proto/go-openapiv2/models"
)

// KafeidoServiceCreateProjectReader is a Reader for the KafeidoServiceCreateProject structure.
type KafeidoServiceCreateProjectReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *KafeidoServiceCreateProjectReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewKafeidoServiceCreateProjectOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewKafeidoServiceCreateProjectDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewKafeidoServiceCreateProjectOK creates a KafeidoServiceCreateProjectOK with default headers values
func NewKafeidoServiceCreateProjectOK() *KafeidoServiceCreateProjectOK {
	return &KafeidoServiceCreateProjectOK{}
}

/*
KafeidoServiceCreateProjectOK describes a response with status code 200, with default header values.

A successful response.
*/
type KafeidoServiceCreateProjectOK struct {
	Payload *models.KafeidoCreateProjectResponse
}

// IsSuccess returns true when this kafeido service create project o k response has a 2xx status code
func (o *KafeidoServiceCreateProjectOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this kafeido service create project o k response has a 3xx status code
func (o *KafeidoServiceCreateProjectOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this kafeido service create project o k response has a 4xx status code
func (o *KafeidoServiceCreateProjectOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this kafeido service create project o k response has a 5xx status code
func (o *KafeidoServiceCreateProjectOK) IsServerError() bool {
	return false
}

// IsCode returns true when this kafeido service create project o k response a status code equal to that given
func (o *KafeidoServiceCreateProjectOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the kafeido service create project o k response
func (o *KafeidoServiceCreateProjectOK) Code() int {
	return 200
}

func (o *KafeidoServiceCreateProjectOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/projects][%d] kafeidoServiceCreateProjectOK %s", 200, payload)
}

func (o *KafeidoServiceCreateProjectOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/projects][%d] kafeidoServiceCreateProjectOK %s", 200, payload)
}

func (o *KafeidoServiceCreateProjectOK) GetPayload() *models.KafeidoCreateProjectResponse {
	return o.Payload
}

func (o *KafeidoServiceCreateProjectOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.KafeidoCreateProjectResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewKafeidoServiceCreateProjectDefault creates a KafeidoServiceCreateProjectDefault with default headers values
func NewKafeidoServiceCreateProjectDefault(code int) *KafeidoServiceCreateProjectDefault {
	return &KafeidoServiceCreateProjectDefault{
		_statusCode: code,
	}
}

/*
KafeidoServiceCreateProjectDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type KafeidoServiceCreateProjectDefault struct {
	_statusCode int

	Payload *models.RPCStatus
}

// IsSuccess returns true when this kafeido service create project default response has a 2xx status code
func (o *KafeidoServiceCreateProjectDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this kafeido service create project default response has a 3xx status code
func (o *KafeidoServiceCreateProjectDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this kafeido service create project default response has a 4xx status code
func (o *KafeidoServiceCreateProjectDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this kafeido service create project default response has a 5xx status code
func (o *KafeidoServiceCreateProjectDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this kafeido service create project default response a status code equal to that given
func (o *KafeidoServiceCreateProjectDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the kafeido service create project default response
func (o *KafeidoServiceCreateProjectDefault) Code() int {
	return o._statusCode
}

func (o *KafeidoServiceCreateProjectDefault) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/projects][%d] KafeidoService_CreateProject default %s", o._statusCode, payload)
}

func (o *KafeidoServiceCreateProjectDefault) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/projects][%d] KafeidoService_CreateProject default %s", o._statusCode, payload)
}

func (o *KafeidoServiceCreateProjectDefault) GetPayload() *models.RPCStatus {
	return o.Payload
}

func (o *KafeidoServiceCreateProjectDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RPCStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
